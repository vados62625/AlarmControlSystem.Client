@page "/Arm"
@using GPNA.AlarmControlSystem.Pages.Monitoring.Components
@using GPNA.AlarmControlSystem.Interfaces
@using GPNA.AlarmControlSystem.Models.Dto.BufferAlarms
@using GPNA.AlarmControlSystem.Models.Dto.IncomingAlarm
@using GPNA.AlarmControlSystem.Models.Enums
@using GPNA.AlarmControlSystem.Services
@inject IJSRuntime JS

<CascadingValue Name="From" Value="@From">
    <CascadingValue Name="To" Value="@To">

        <div class="page-main">
            <div class="page-title">
                <div class="d-flex date-period-select">
                    <input type="datetime-local" @bind="From" @bind:event="oninput" @onchange="async () => await InitializePageAsync()">
                    <input type="datetime-local" @bind="To" @bind:event="oninput" @onchange="async () => await InitializePageAsync()">
                </div>
                <div class="d-flex tagname-filter">
                    <div class="input-group ms-2">
                        <span class="input-group-text" id="tagname-addon">Тег</span>
                        <input type="text" class="form-control" aria-describedby="tagname-addon" @bind="TagNameFilter" @bind:event="oninput" @onchange="async () => await InitializePageAsync()">
                    </div>
                </div>
                <div class="d-flex">
                    <p>МОНИТОРИНГ СИГНАЛИЗАЦИЙ ЗА ПЕРИОД С DP МЕРЕТОЯХА <b>ТАЗОВСКОЕ</b></p>
                    <SelectObject Object="dto"/>
                    <p style="margin-left:15px;">
                        <b>@ArmName</b>
                    </p>
                    <SelectObject/>
                </div>
                <div class="d-flex gap-2">
                    @if (FiltersOn)
                    {
                        <TitleBarButton Title="Фильтрация" FunctionButton="filtration" Action="DropFilters"/>
                    }
                    <TitleBarButton Title="Экспорт" FunctionButton="export" Action="DownloadFileFromStream"/>
                </div>

            </div>
            <div class="d-flex justify-content-between overflow-auto">
                <div class="priority-alarm-container">
                    <PriorityAlarm Title="Всего" Value="AlarmsCollection?.TotalCount" Priority="total"/>
                    <PriorityAlarm Title="Критичный" Value="AlarmsCollection?.CountByPriority?[PriorityType.Urgent]" Priority="critical"/>
                    <PriorityAlarm Title="Высокий" Value="AlarmsCollection?.CountByPriority?[PriorityType.High]" Priority="high"/>
                    <PriorityAlarm Title="Низкий" Value="AlarmsCollection?.CountByPriority?[PriorityType.Low]" Priority="low"/>
                    <PriorityAlarm Title="Инфо" Value="AlarmsCollection?.CountByPriority?[PriorityType.Information]" Priority="info"/>
                    <PriorityAlarm Title="Без приоритета" Value="AlarmsCollection?.CountByPriority?[PriorityType.None]" Priority="none-priority"/>
                </div>
                <div class="priority-alarm-container">
                    <PriorityAlarm Title="HH" Value="AlarmsCollection?.CountByState?[StateType.HH]" Status="hh"/>
                    <PriorityAlarm Title="H" Value="AlarmsCollection?.CountByState?[StateType.H]" Status="h"/>
                    <PriorityAlarm Title="LL" Value="AlarmsCollection?.CountByState?[StateType.LL]" Status="ll"/>
                    <PriorityAlarm Title="L" Value="AlarmsCollection?.CountByState?[StateType.L]" Status="l"/>
                    <PriorityAlarm Title="DISCR" Value="AlarmsCollection?.CountByState?[StateType.Discr]" Status="discr"/>
                    <PriorityAlarm Title="RSHI" Value="AlarmsCollection?.CountByState?[StateType.RSHI]" Status="rshi"/>
                    <PriorityAlarm Title="RSLO" Value="AlarmsCollection?.CountByState?[StateType.RSLO]" Status="rslo"/>
                    <PriorityAlarm Title="NoneState" Value="AlarmsCollection?.CountByState?[StateType.none]" Status="none-state"/>
                    <PriorityAlarm Title="Пожар" StatusActive="@(AlarmsCollection?.Fire ?? false ? "active" : "")" Status="fire"/>
                    <PriorityAlarm Title="Загазованность" StatusActive="@(AlarmsCollection?.Gas ?? false ? "active" : "")" Status="gas"/>
                </div>
            </div>
            <div style="border-radius: 6px;">
                <MonitoringTable Alarms="AlarmsCollection?.Items"></MonitoringTable>
            </div>
        </div>

    </CascadingValue>
</CascadingValue>

@code {

    [Inject]
    private IIncomingAlarmService? IncomingAlarmService { get; set; }

    [Inject]
    private ExportService? ExportService { get; set; }

    [Inject]
    private ISpinnerService? SpinnerService { get; set; }

    [Parameter]
    public DateTime DateTime { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public int ArmId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public int FieldId { get; set; } = 1;

    [Parameter]
    public string? ArmName { get; set; }

    [Parameter]
    public string? FieldName { get; set; }

    [CascadingParameter(Name = "From")]
    public DateTimeOffset From { get; set; }

    [CascadingParameter(Name = "To")]
    public DateTimeOffset To { get; set; }

    [Parameter]
    public string TagNameFilter { get; set; } = string.Empty;

    private bool FiltersOn => !string.IsNullOrWhiteSpace(TagNameFilter);

    private AlarmsCollection<IncomingAlarmDto>? AlarmsCollection { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        To = DateTimeOffset.Now;
        From = new DateTimeOffset(2023, 8, 1, 22, 0, 0, DateTimeOffset.Now.Offset);

        await InitializePageAsync();
    }

    protected override void OnParametersSet()
    {
        ArmName = ArmId switch
        {
            1 => "УПНГ",
            2 => "БМУПН",
            3 => "Скважины",
            4 => "АРМ 4",
            _ => ArmName
            };
    }

    private async Task InitializePageAsync()
    {
        SpinnerService?.Show();

        await UpdateAlarms();

        SpinnerService?.Hide();
    }

    private async Task UpdateAlarms()
    {
        if (IncomingAlarmService != null)
        {
            var request = await IncomingAlarmService.GetAlarmsPerDate(new GetIncomingAlarmsByDatesQuery
            {
                WorkStationId = ArmId,
                TagName = TagNameFilter,
                ActivationFrom = From,
                ActivationTo = To
            });

            if (request.Success)
            {
                AlarmsCollection = request.Payload;
            }
        }
    }

    private Task DropFilters()
    {
        TagNameFilter = string.Empty;
        return InitializePageAsync();
    }

    private async Task<Stream?> GetFileStream()
    {
        var result = await ExportService.ExportIncomingAlarms(new ExportIncomingAlarmsByDatesQuery
        {
            DocumentType = ExportDocumentType.Excel,
            WorkStationId = ArmId,
            TagName = TagNameFilter,
            ActivationFrom = From,
            ActivationTo = To
        });

        return new MemoryStream(result);
    }

    private async Task DownloadFileFromStream()
    {
        var fileStream = await GetFileStream();

        if (fileStream == null) return;

        var fileName = "export.xlsx";

        using var streamRef = new DotNetStreamReference(stream: fileStream);

        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }

}