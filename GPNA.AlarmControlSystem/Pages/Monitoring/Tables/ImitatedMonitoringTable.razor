@using GPNA.AlarmControlSystem.Models.Dto.ActiveAlarm
@using GPNA.AlarmControlSystem.Models.Dto.ImitatedAlarm
@using GPNA.AlarmControlSystem.Models.Dto.KpiSettings
@using GPNA.AlarmControlSystem.Models.Enums
@using GPNA.AlarmControlSystem.Pages.Monitoring.Components

@using GPNA.AlarmControlSystem.Pages.Monitoring.Components.Alarms
<table class="bg-monitoring-table ">
    <thead>
    <tr>
        <th class="bg-monitoring-table-button" style="min-width: 90px;">
            <div>
                <p>Дата</p>
                <button onclick="@(async () => await OnOrderingChanged.InvokeAsync(nameof(ActiveAlarmDto.DateTimeStart)))">
                    <svg>
                        <use href="/img/icons/icons.svg#sorting"></use>
                    </svg>
                </button>
            </div>
        </th>
        <th class="bg-monitoring-table-button" style="min-width: 90px;">
            <div>
                <p>Время</p>
                <button>
                    <svg>
                        <use href="/img/icons/icons.svg#sorting"></use>
                    </svg>
                </button>
            </div>
        </th>
        <th class="bg-monitoring-table-button" style="min-width: 120px;">
            <div>
                <p>Длительность</p>
                <button onclick="@(async () => await OnOrderingChanged.InvokeAsync("Duration"))">
                    <svg>
                        <use href="/img/icons/icons.svg#sorting"></use>
                    </svg>
                </button>
            </div>
        </th>
        <th class="bg-monitoring-table-button" style="min-width: 230px;">
            <div>
                <p>Таг</p>
                <button>
                    <svg>
                        <use href="/img/icons/icons.svg#search"></use>
                    </svg>
                </button>
            </div>
        </th>
        <th style="min-width: 860px;">
            <p>Описание</p>
        </th>
        <th style="min-width: 150px;">
            <p>Значение</p>
        </th>
        <th class="bg-monitoring-table-button" style="min-width: 90px;">
            <div>
                <p>В задачи</p>
                <button onclick="@(async () => await OnOrderingChanged.InvokeAsync(nameof(ActiveAlarmDto.StatusAlarm)))">
                    <svg>
                        <use href="/img/icons/icons.svg#sorting"></use>
                    </svg>
                </button>
            </div>
        </th>
    </tr>
    </thead>
    <tbody>
    @if (Alarms != null && Alarms.Any())
    {
        foreach (var alarm in Alarms)
        {
            <ImitatedAlarmComponent Alarm="alarm" Kpi="MonitoringSettings?.ImitationParams" OnAlarmChecked="OnAlarmChecked"/>
        }
    }
    </tbody>
</table>

@if (Alarms == null || !Alarms.Any())
{
    <div class="p-4 text-center">
        <p>Нет данных</p>
    </div>
}

@code {

    [Parameter]
    public string? ButtonArrow { get; set; } = "arrow-down";

    [Parameter]
    public ImitatedAlarmDto[]? Alarms { get; set; }

    [CascadingParameter(Name = nameof(StateFilter))]
    public Dictionary<StateType, bool>? StateFilter { get; set; }

    [CascadingParameter(Name = nameof(PriorityFilter))]
    public Dictionary<PriorityType, bool>? PriorityFilter { get; set; }
    
    [CascadingParameter(Name = nameof(AlarmType))]
    public AlarmType? AlarmType { get; set; }

    [CascadingParameter(Name = nameof(MonitoringSettings))]
    public MonitoringSettingsDto? MonitoringSettings { get; set; }
    
    [Parameter]
    public EventCallback<StateType?> OnStateFilterChanged { get; set; }

    [Parameter]
    public EventCallback<PriorityType?> OnPriorityFilterChanged { get; set; }

    [Parameter]
    public EventCallback<string> OnOrderingChanged { get; set; }
    
    [Parameter]
    public EventCallback<int> OnAlarmChecked { get; set; }

    private async Task SetStateFilter(StateType? state)
    {
        await OnStateFilterChanged.InvokeAsync(state);
    }

}