@using GPNA.AlarmControlSystem.Pages.Monitoring.Alarms
@using GPNA.AlarmControlSystem.Pages.Monitoring.Tables
@using GPNA.AlarmControlSystem.Models.Enums

<div style="display:flex; justify-content:flex-end; gap: 10px; color: var(--color-typo-primary);">
    <span>Всего: <b>@countAll</b></span>
    <span>Критический: <b>@countUrgent</b></span>
    <span>Высокий: <b>@countHigh</b></span>
    <span>Низкий: <b>@countLow</b></span>
    <span>Информационный: <b>@countInfo</b></span>
    <span>Без приоритета: <b>@countNonePriority</b></span>
    <br />
    <span>HH: <b>@countHH</b></span>
    <span>H: <b>@countH</b></span>
    <span>LL: <b>@countLL</b></span>
    <span>L: <b>@countL</b></span>
    <span>Discr: <b>@countDiscr</b></span>
    <span>RSHI: <b>@countRSHI</b></span>
    <span>RSLO: <b>@countRSLO</b></span>
    <span>NoneState: <b>@countNoneState</b></span>
</div>
<div class="table-responsive" style="margin-top:10px;height:780px;overflow-y:auto;border-top: 0.5px solid rgba(0, 65, 102, 0.2);border-bottom: 0.5px solid rgba(0, 65, 102, 0.2);">
    <table class="table table-bordered">
        <thead class="thead-light">
            <tr>
                <th>Дата последней сигнализации</th>
                <th>Время последней сигнализации</th>
                <th colspan=3>Таг</th>
                <th colspan=4>Описание</th>
                <th>Приоритет 
                    <select @bind="@Priority" @onclick="OnParametersSetAsync">
                        <option value="">Все</option>
                        <option value="@PriorityType.Urgent">Критический</option>
                        <option value="@PriorityType.High">Высокий</option>
                        <option value="@PriorityType.Low">Низкий</option>
                        <option value="@PriorityType.Information">Инфо</option>
                        <option value="@PriorityType.None">Без приорит.</option>                        
                    </select>
                </th>
                <th>Уставка/Значение</th>        
                <th>Повторений за смену</th>
                <th>В работе</th>
            </tr>            
        </thead>
        <tbody>

            @if(Alarms == null)
            {
                <Loader/>
            }
            else
            {
                <Virtualize Items="Alarms">
                    <IncomingAlarmComponent @key="context[context.Count-1].Id" List="@context"/>                                   
                </Virtualize>
            }
        
        </tbody>
    </table>
</div>

@code {
    [Inject] IIncomingAlarmService IncomingAlarmService { get; set; } = null!;

    [Parameter] public List<List<IncomingAlarmDto>>? Alarms { get; set; }

    [Parameter] public PriorityType? Priority { get; set; }

    [CascadingParameter(Name = "From")] public DateTime From { get; set; }
    [CascadingParameter(Name = "To")] public DateTime To { get; set; }

    int countL, countLL, countH, countHH, countAll, countUrgent, countHigh, countLow, countInfo, countNonePriority, countDiscr,countRSHI,countRSLO,countComms, countNoneState;

    protected override async Task OnParametersSetAsync()
    {
        Alarms = null;
        countH = 0; countHH = 0; countL = 0; countLL = 0; countAll = 0; countUrgent = 0; countHigh = 0; countLow = 0; countInfo = 0; countNonePriority=0; countDiscr = 0; countRSHI = 0; countRSLO = 0; countComms = 0; countNoneState = 0;
        var incomingAlarms= await IncomingAlarmService.GetAlarmsPerDate(1, From, To);
        var from = new DateTime(From.Year, From.Month, From.Day, 8, 0, 0);

        for (int i = 0; from<To; i++ )
        {
            var list = new List<IncomingAlarmDto>();
            list.Add(new IncomingAlarmDto() { DateTime = from, Description = "ПЕРЕСМЕНКА", Id=i,Priority=PriorityType.None });
            incomingAlarms.Add(list);
            countAll -= 1;
            countNonePriority -= 1;
            from = from.AddHours(12);
        }

        Alarms = incomingAlarms.OrderByDescending(c => c[c.Count-1].DateTime).ToList();

        foreach (var x in Alarms)
        {
            switch (x[x.Count - 1].State) 
            {
                case StateType.H:
                    countH += x.Count;
                    break; 
                case StateType.HH:
                    countHH += x.Count;
                    break; 
                case StateType.L:
                    countL += x.Count;
                    break; 
                case StateType.LL:
                    countLL += x.Count;
                    break; 
                case StateType.Discr:
                    countDiscr += x.Count;
                    break; 
                case StateType.RSHI:
                    countRSHI += x.Count;
                    break; 
                case StateType.RSLO:
                    countRSLO += x.Count;
                    break; 
                case StateType.Comms:
                    countComms += x.Count;
                    break; 
                case StateType.none:
                    countNoneState += x.Count;
                    break; 
            }

            switch (x[x.Count - 1].Priority) 
            {
                case PriorityType.Low:
                    countLow += x.Count;
                    break; 
                case PriorityType.High:
                    countHigh += x.Count;
                    break; 
                case PriorityType.Urgent:
                    countUrgent += x.Count;
                    break; 
                case PriorityType.Information:
                    countInfo += x.Count;
                    break; 
                case PriorityType.None:
                    countNonePriority += x.Count;
                    break; 
            }

            countAll += x.Count;
        }

        if (Priority != null)
        {
            var alarms = new List<List<IncomingAlarmDto>>();
            foreach (var context in Alarms)
            {
                if (Priority == context[context.Count - 1].Priority || Priority == null)
                {
                    alarms.Add(context);
                }
            }
            Alarms = alarms;
        }
    }
}
