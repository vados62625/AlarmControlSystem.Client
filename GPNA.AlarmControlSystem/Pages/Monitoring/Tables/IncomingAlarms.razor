@using LocalDbStorage.Interfaces
@using LocalDbStorage.Repositories.Models
@using GPNA.AlarmControlSystem.Pages.Monitoring.Alarms
@using GPNA.AlarmControlSystem.Pages.Monitoring.Tables
@using LocalDbStorage.Dto
@using LocalDbStorage.Repositories.Models.Enum
@using LocalDbStorage.Services

<thead class="thead-light">
    <tr>
        <th>Дата последней сигнализации</th>
        <th>Время последней сигнализации</th>
        <th colspan=3>Таг</th>
        <th colspan=4>Описание</th>
        <th>Приоритет 
            <select @bind="@Priority" @onabort="OnParametersSet">
                <option value="5">Все</option>
                <option value="4">Критический</option>
                <option value="3">Высокий</option>
                <option value="2">Низкий</option>
            </select>
        </th>
        <th>Уставка/Значение</th>        
        <th>Повторений за смену</th>
        <th>Тест</th>
    </tr>            
</thead>
<tbody>

    @if(Alarms == null)
    {
        <Loader/>
    }
    else
    {
        <Virtualize Items="Alarms">
            <IncomingAlarmComponent @key="context[context.Count-1].Id" List="@context"/>
        </Virtualize>
    }
        
</tbody>

@code {
    [Inject] IIncomingAlarmService IncomingAlarmService { get; set; } = null!;

    [Parameter] public List<List<IncomingAlarmDto>>? Alarms { get; set; }

    [Parameter] public int? Priority { get; set; } = 5;

    [CascadingParameter(Name = "From")] public DateTime From { get; set; }
    [CascadingParameter(Name = "To")] public DateTime To { get; set; }


    protected override async Task OnParametersSetAsync()
    {
        Alarms = null;
        var incomingAlarms= await IncomingAlarmService.GetAlarmsPerDate(1, From, To);
        var from = new DateTime(From.Year, From.Month, From.Day, 8, 0, 0);

        for (int i = 0; from<To; i++ )
        {
            var list = new List<IncomingAlarmDto>();
            list.Add(new IncomingAlarmDto() { DateTime = from, Description = "ПЕРЕСМЕНКА", Id=i,Priority=PriorityType.None });
            incomingAlarms.Add(list);
            from = from.AddHours(12);
        }

        Alarms = incomingAlarms.OrderByDescending(c => c[c.Count-1].DateTime).ToList();
        //if (Priority != 5)
        //{
        //    var alarms = new List<IncomingAlarm>();
        //    foreach (var item in Alarms ?? new List<IncomingAlarm>())
        //    {
        //        if (Convert.ToInt32(item.Priority) == Priority)
        //        {
        //            alarms.Add(item);
        //        }
        //    }
        //    Alarms = alarms;
        //}
    }
}
