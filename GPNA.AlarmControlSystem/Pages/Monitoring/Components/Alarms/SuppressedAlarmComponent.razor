@using Microsoft.AspNetCore.Components
@using GPNA.AlarmControlSystem.Models.Enums
@using GPNA.AlarmControlSystem.Interfaces
@using GPNA.AlarmControlSystem.Models.Dto.BufferAlarms
@using GPNA.AlarmControlSystem.Models.Dto.IncomingAlarm
@using GPNA.AlarmControlSystem.Pages.Monitoring.Components
@using GPNA.AlarmControlSystem.Extensions
@using GPNA.AlarmControlSystem.Models.Dto.SuppressedAlarm
@inject IJSRuntime JSRuntime

@if (Alarm != null && Alarm.Description != "ПЕРЕДАЧА СМЕНЫ")
{
    <tr>
        <td @onclick="ShowMoreAttributes">@Alarm.DateTimeActivation.ToString("dd.MM.yyyy")</td>

        <td @onclick="ShowMoreAttributes">@Alarm.DateTimeActivation.ToString("HH:mm")</td>

        <td @onclick="ShowMoreAttributes">
            @(Alarm.Duration?.Hours.ToString() ?? "N/A")
        </td>

        <td @onclick="ShowMoreAttributes">@(Alarm.TagName)</td>

        <td @onclick="ShowMoreAttributes">
            <MonitoringTableStatus Title="@Alarm.State.GetDescription()" Status="@Alarm.State.ToString().ToLower()"/>
        </td>

        <td @onclick="ShowMoreAttributes"> @(Alarm.Description ?? "N/A") </td>

        <td @onclick="ShowMoreAttributes">
            <MonitoringTableStatus Title="@Alarm.Priority.GetDescription()" Priority="@Alarm.Priority.ToString().ToLower()"/>
        </td>

        <td @onclick="ShowMoreAttributes">@(Alarm.AlarmLimit ?? "N/A") / @(Alarm.Value ?? "N/A")</td>

        <td class="item-table__checkbox" @onclick="SendTest">
            <input class="item-table__checkbox-input" type="checkbox" checked="@(Alarm.StatusAlarm == StatusAlarmType.InWork)"/>
        </td>
    </tr>

    @if (_displayComment || Alarm.Comment is {Length: > 0 })
    {
        <tr class="monitoring-table-comment">
            <td colspan="9">
                <input type="text" placeholder="Введите комментарий" @bind="Alarm.Comment" @bind:event="oninput" @onkeydown="SaveComment"/>
            </td>
        </tr>
    }
}
else if (Alarm is {Description: "ПЕРЕДАЧА СМЕНЫ" })
{
    <tr class="monitoring-table-shift">
        <td>@Alarm.DateTimeActivation.ToString("d")</td>
        <td>@Alarm.DateTimeActivation.ToString("t")</td>
        <td colspan=7>@Alarm.Description</td>
    </tr>
}

@code
{
    [Inject]
    IBufferAlarmService AlarmService { get; set; } = null!;

    [Parameter]
    public SuppressedAlarmDto? Alarm { get; set; }

    bool _displayComment = false;

    protected override void OnInitialized()
    {
    }

    private async Task SaveComment(KeyboardEventArgs e)
    {
        if (e.Code is "Enter" or "NumpadEnter")
        {
            if (Alarm?.Comment != null)
            {
                await AlarmService.AddComment(new AddCommentInAlarmCommand { Id = Alarm.Id, Comment = Alarm.Comment });
                await JSRuntime.InvokeVoidAsync("saveComment", "snackbar");
            }
        }
    }

    private async Task SendTest()
    {
        if (Alarm != null)
        {
            Alarm.StatusAlarm = Alarm is {StatusAlarm: StatusAlarmType.Undefined } ? StatusAlarmType.InWork : StatusAlarmType.Undefined;
            await AlarmService.ChangeStatus(new ChangeStatusAlarmCommand { Id = Alarm.Id, StatusAlarm = Alarm.StatusAlarm });
            await JSRuntime.InvokeVoidAsync("saveComment", "snackbar");
        }
    }

    void ShowMoreAttributes()
    {
        _displayComment = !_displayComment;
    }
}