@using GPNA.AlarmControlSystem.Models.Enums
@using GPNA.AlarmControlSystem.Models.Dto.BufferAlarms
@using GPNA.AlarmControlSystem.Models.Dto.IncomingAlarm
@inject IJSRuntime JSRuntime

<canvas id="@Id"></canvas>

@code {

    [Parameter]
    public Dictionary<DateTimeOffset, IncomingAlarmDto[]>? IncomingAlarms { get; set; }

    [Parameter]
    public string? Id { get; set; } = "chart2";

    [Parameter]
    public int Kpi { get; set; }

    [Parameter]
    public bool IsEnableRenderChart { get; set; }
    
    protected override async void OnAfterRender(bool firstRender)
    {
        if (IncomingAlarms is {Count: > 0 })
        {
            var numTime = IncomingAlarms.Select(kvPair => $"{kvPair.Key:M} {kvPair.Key:t}");
            
            var priorities = new[] { PriorityType.Low, PriorityType.High, PriorityType.Urgent };

            var armCount = priorities.ToDictionary(
                priority => priority,
                priority => IncomingAlarms.Select(kvPair => kvPair.Value
                    .Count(c => c.Priority == priority))
                    .ToArray());

            var config = new
            {
                Type = "line",
                Options = new
                {
                    Responsive = true,
                    MaintainAspectRatio = false,
                    Interaction = new
                    {
                        Mode = "index"
                    },
                    Scales = new
                    {
                        y = new
                        {
                            Display = true
                        },
                        x = new
                        {
                            Display = true,
                            Ticks = new
                            {
                                maxRotation = 25
                            }
                        }
                    },
                    Plugins = new
                    {
                        Tooltip = new
                        {
                            Intersect = false,
                            BackgroundColor = "#fff",
                            BodyColor = "#11273B",
                            BorderWidth = 1,
                            BorderColor = "#97B2C4",
                            DisplayColors = true,
                            TitleColor = "#11273B",
                            TitleFont = new
                            { Size = "16" }
                        },
                        Legend = new
                        {
                            Display = true,
                            Position = "top",
                            Labels = new
                            {
                                BoxWidth = 40,
                                BoxHeight = 11,
                                Color = "rgba(0, 32, 51, 0.70)",
                                Font = new
                                {
                                    Family = "Inter",
                                    Size = "14px",
                                },
                                UsePointStyle = true,
                                Padding = 20
                            }
                        },
                    },
                },
                Data = new
                {
                    Datasets = new[]
                    {
                        new { Data = armCount[PriorityType.Urgent], BackgroundColor = "#EB3333", BorderColor = "#EB3333", BorderWidth = "2", PointRadius = "0", Label = "Критичный" },
                        new { Data = armCount[PriorityType.High], BackgroundColor = "#F38B01", BorderColor = "#F38B01", BorderWidth = "2", PointRadius = "0", Label = "Высокий" },
                        new { Data = armCount[PriorityType.Low], BackgroundColor = "#56B9F2", BorderColor = "#56B9F2", BorderWidth = "2", PointRadius = "0", Label = "Низкий" },
                    },
                    Labels = numTime
                }
            };
            if(IsEnableRenderChart || firstRender)
            {
                await JSRuntime.InvokeVoidAsync("setup3", Id!, config);
            }
            
        }
    }

}