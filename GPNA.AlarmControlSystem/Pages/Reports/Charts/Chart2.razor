@using GPNA.AlarmControlSystem.Models.Enums
@using GPNA.AlarmControlSystem.Models.Dto.BufferAlarms
@inject IJSRuntime JSRuntime
 
<canvas id="@Id"></canvas>
 
@code {

    [Parameter] public Dictionary<DateTime, List<IncomingAlarmDto>>? IncomingAlarms {get;set;}

    [Parameter]
    public string? Id { get; set; } = "chart2";
    [Parameter]
    public int Kpi { get; set; }     
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (IncomingAlarms != null && IncomingAlarms.Count > 0)
        {
            var numTime = new string[IncomingAlarms.Count];

            var arm1Low = new int[IncomingAlarms.Count];
            var arm1High = new int[IncomingAlarms.Count];
            var arm1Urgent = new int[IncomingAlarms.Count];
            var arm1Info = new int[IncomingAlarms.Count];

            int i = 0;

            foreach (var alarmsOnHour in IncomingAlarms)
            {
                numTime[i] = (alarmsOnHour.Key.ToString("M") + " " + alarmsOnHour.Key.ToString("t"));
                
                 if (alarmsOnHour.Value!=null && alarmsOnHour.Value.Count > 0)
                    foreach (var alarm in alarmsOnHour.Value)
                    {
                        if (alarm.Priority == PriorityType.Low)
                            arm1Low[i] += 1;
                        else if (alarm.Priority == PriorityType.High)
                            arm1High[i] += 1;
                        else if (alarm.Priority == PriorityType.Urgent)
                        {
                            arm1Urgent[i] += 1;
                        }
                    else
                        arm1Info[i] += 1;
                    }


                i++;
            }

            var config = new
        {

            Type = "line",
            Options = new
            {
                Responsive = true,
                MaintainAspectRatio = false,

                Interaction = new
                {
                    Mode = "index"
                },
                Scales = new
                {
                    y = new
                    {
                        Display = true
                    },
                    x = new
                    {
                        Display = true,
                        Ticks = new
                        {
                            maxRotation = 25
                        }
                    }
                },
                Plugins = new
                {
                    Tooltip = new
                    {
                        Intersect = false,
                        BackgroundColor = "#fff",
                        BodyColor = "#11273B",
                        BorderWidth = 1,
                        BorderColor = "#97B2C4",
                        DisplayColors = true,
                        TitleColor = "#11273B",
                        TitleFont = new
                        {Size ="16"}
                    },
                    Legend = new
                    {
                        Display = true,
                        Position = "top"
                    },
                },
            },

            Data = new
            {
                Datasets = new[]
                {
                    new { Data = arm1Urgent, BackgroundColor= "#EB3333", BorderColor = "#EB3333", BorderWidth = "2",PointRadius="0",Label = "Критичный" },
                    new { Data = arm1High, BackgroundColor= "#F38B01", BorderColor = "#F38B01", BorderWidth = "2",PointRadius="0",Label = "Высокий"},
                    new { Data = arm1Low, BackgroundColor= "#56B9F2", BorderColor = "#56B9F2", BorderWidth = "2",PointRadius="0",Label = "Низкий"} ,
                    new { Data = arm1Info, BackgroundColor= "#000000", BorderColor = "#000000", BorderWidth = "2",PointRadius="0",Label = "Информационный"}
                },
                Labels = numTime
            }
        };
            await JSRuntime.InvokeVoidAsync("setup3", Id!, config);
        }
        
        
        
    }

}

