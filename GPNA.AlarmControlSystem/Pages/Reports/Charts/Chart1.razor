@using GPNA.AlarmControlSystem.Models.Dto.BufferAlarms
@inject IJSRuntime JSRuntime

<canvas id="@Id"></canvas>

@code {

    [Parameter] public Dictionary<DateTime, List<IncomingAlarmDto>>? IncomingAlarms {get;set;}

    [Parameter]
    public string? Id { get; set; } = "chart1";

    [Parameter]
    public int Kpi { get; set; }

    [Parameter]
    public int[]? Data2 { get; set; }

    [Parameter]
    public int[]? Data3 { get; set; }

    [Parameter]
    public int[]? Data4 { get; set; }      


    [Parameter] public bool IsEnableRenderChart { get; set; } = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (IncomingAlarms != null && IncomingAlarms.Count > 0)
        {
            var Arm1 = new int[IncomingAlarms.Count];
            var kpi = new int[IncomingAlarms.Count];
            var numTime = new string[IncomingAlarms.Count];
            int i = 0;

            foreach (var alarmsOnHour in IncomingAlarms)
            {
                numTime[i] = (alarmsOnHour.Key.ToString("M") + " " + alarmsOnHour.Key.ToString("t"));
                Arm1[i] = alarmsOnHour.Value.Count;
                kpi[i] = Kpi;
                i++;
            }

            var config = new
            {
                Type = "line",
                Options = new
                {
                    Responsive = true,
                    MaintainAspectRatio = false,

                    Interaction = new
                    {
                        Mode = "index"
                    },
                    Scales = new
                    {
                        y = new
                        {
                            Display = true
                        },
                        x = new
                        {
                            Display = true,
                            Ticks = new
                            {
                                maxRotation = 25
                            }

                        }
                    },
                    Plugins = new
                    {

                        Tooltip = new
                        {

                            Intersect = false,

                            BackgroundColor = "#fff",
                            BodyColor = "#11273B",
                            BorderWidth = 1,
                            BorderColor = "#97B2C4",
                            DisplayColors = true,
                            TitleColor = "#11273B",
                            TitleFont = new
                            {Size ="16"}
                        },
                        Legend = new
                        {
                            Display = true,
                            Position = "top"
                        },
                    },
                },
                Data = new
                {
                    Datasets = new[]
                    {
                        new { Data = Arm1, BackgroundColor= "#56B9F2", BorderColor = "#56B9F2", BorderWidth = "2",PointRadius="0",Label = "УПНГ", borderDash = new []{0, 0}},
                        new { Data = Data2, BackgroundColor= "#20B55F", BorderColor = "#20B55F", BorderWidth = "2",PointRadius="0",Label = "БМУПН", borderDash = new []{0, 0}},
                        new { Data = Data3, BackgroundColor= "#B556FF", BorderColor = "#B556FF", BorderWidth = "2",PointRadius="0",Label = "Скважины", borderDash = new []{0, 0}},
                        new { Data = Data4, BackgroundColor= "#F2C94C", BorderColor = "#F2C94C", BorderWidth = "2",PointRadius="0",Label = "Энергетика", borderDash = new []{0, 0}},
                        new { Data = kpi, BackgroundColor= "#EB3333", BorderColor = "#EB3333", BorderWidth = "2",PointRadius="0",Label = "KPI", borderDash = new []{5, 5}}
                    },
                    Labels = numTime
                }
            };
            await JSRuntime.InvokeVoidAsync("setup3", Id!, config);
        }        
        
        
    }
}

