@using GPNA.AlarmControlSystem.Models.Dto.BufferAlarms
@using GPNA.AlarmControlSystem.Models.Dto.IncomingAlarm
@using GPNA.AlarmControlSystem.Models
@using GPNA.AlarmControlSystem.Models.Enums
@using Microsoft.VisualBasic
@inject IJSRuntime JSRuntime

<canvas id="@Id"></canvas>

@code {

    [Parameter]
    public Dictionary<string, Dictionary<DateTimeOffset, IncomingAlarmDto[]>>? IncomingAlarms { get; set; }

    [Parameter]
    public string? Id { get; set; } = "chart1";

    [Parameter]
    public int Kpi { get; set; }

    [Parameter]
    public bool IsEnableRenderChart { get; set; } = true;

    private List<Dataset> _datasets = new();
    
    private static readonly string[] COLORS = {"#65c1e4", "#56b368", "#ba8fdb", "#ebca62", "#0078d2", "#f2994a"};


    //Получить по айди филда все армы(workStation)
    //

    protected override async Task OnParametersSetAsync()
    {
        if (IncomingAlarms is {Count: > 0 })
        {
            _datasets = new List<Dataset>();

            var i = 0;

            foreach (var alarmsDataset in IncomingAlarms)
            {
                var data = alarmsDataset.Value.Select(c => new PointChart
                {
                    x = $"{c.Key:M} {c.Key:t}",
                    y = c.Value.Count(alarm => alarm.Priority is PriorityType.High or PriorityType.Low or PriorityType.Urgent)
                }).ToArray();

                var color = COLORS[i];
                
                _datasets.Add(new Dataset
                {
                    Data = data,
                    BorderColor = color,
                    BackgroundColor = color,
                    Label = alarmsDataset.Key
                });

                i++;
            }

            AddKpiDataset();

            var config = GetConfig(_datasets);
            await JSRuntime.InvokeVoidAsync("setup3", Id!, config);
        }
    }

    private object GetConfig(IEnumerable<Dataset>? datasets)
    {
        var config = new
        {
            Type = "line",
            Options = new
            {
                Responsive = true,
                MaintainAspectRatio = false,
                Interaction = new
                {
                    mode = "nearest",
                    intersect = false
                },
                Scales = new
                {
                    y = new
                    {
                        Display = true
                    },
                    x = new
                    {
                        Display = true,
                        Ticks = new
                        {
                            maxRotation = 25
                        }
                    }
                },
                Plugins = new
                {
                    Tooltip = new
                    {
                        Intersect = false,
                        BackgroundColor = "#fff",
                        BodyColor = "#11273B",
                        BorderWidth = 1,
                        BorderColor = "#97B2C4",
                        DisplayColors = true,
                        TitleColor = "#11273B",
                        TitleFont = new
                        { Size = "16" }
                    },
                    Legend = new
                    {
                        Display = true,
                        Position = "top",
                        Labels = new
                        {
                            BoxWidth = 40,
                            BoxHeight = 11,
                            Color = "rgba(0, 32, 51, 0.70)",
                            Font = new
                            {
                                Family = "Inter",
                                Size = "14px",
                            },
                            UsePointStyle = true,
                            Padding = 20
                        }
                    },
                },
            },
            Data = new
            {
                Datasets = datasets
            }
        };
        return config;
    }

    private void AddKpiDataset()
    {
        if (IncomingAlarms != default)
        {
            var kpi = IncomingAlarms.FirstOrDefault().Value
                .Select(c => new PointChart
                {
                    x = $"{c.Key:M} {c.Key:t}",
                    y = Kpi
                }).ToArray();

            _datasets.Add(new Dataset
            {
                Data = kpi,
                BorderColor = "#EB5757",
                BackgroundColor = "#EB5757",
                BorderDash = new[] { 5, 5 },
                Label = "KPI"
            });
        }
    }

}