@using GPNA.AlarmControlSystem.Models.Dto.BufferAlarms
@using GPNA.AlarmControlSystem.Models.Dto.IncomingAlarm
@using GPNA.AlarmControlSystem.Models
@inject IJSRuntime JSRuntime

<canvas id="@Id"></canvas>

@code {

    [Parameter] public Dictionary<DateTimeOffset, IncomingAlarmDto[]>? IncomingAlarms {get;set;}

    [Parameter]
    public string? Id { get; set; } = "chart1";

    [Parameter]
    public int Kpi { get; set; }

    [Parameter]
    public int[]? Data2 { get; set; }

    [Parameter]
    public int[]? Data3 { get; set; }

    [Parameter]
    public int[]? Data4 { get; set; }      


    [Parameter] public bool IsEnableRenderChart { get; set; } = true;

    //Получить по айди филда все армы(workStation)
    //
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (IncomingAlarms != null && IncomingAlarms.Count > 0)
        {
            var arm1 = new PointChart[IncomingAlarms.Count];
            var kpi = new PointChart[IncomingAlarms.Count];
            int i = 0;

            foreach (var alarmsOnHour in IncomingAlarms)
            {
                var time = alarmsOnHour.Key.ToString("M") + " " + alarmsOnHour.Key.ToString("t");
                arm1[i] = new PointChart()
                {
                    x = time,
                    y = alarmsOnHour.Value.Length
                };
                
                kpi[i] = new PointChart()
                {
                    x = time,
                    y = Kpi
                };
                
                i++;
            }

            var datasets = new Dataset[]
            {
                new Dataset()
                {
                    Data = arm1, 
                    BorderColor = "#65C1E4", 
                    BackgroundColor = "#65C1E4", 
                    Label = "УПНГ"
                },
                new Dataset()
                {
                    Data = kpi, 
                    BorderColor = "#EB5757", 
                    BackgroundColor = "#EB5757", 
                    BorderDash = new []{5, 5},
                    Label = "KPI"
                }
            };
            
            var config = GetConfig(datasets);
            await JSRuntime.InvokeVoidAsync("setup3", Id!, config);
        }
    }
    
    private object GetConfig(Dataset[]? datasets)
    {
        var config = new
        {
            Type = "line",
            Options = new
            {
                Responsive = true,
                MaintainAspectRatio = false,
                Interaction = new
                {
                    mode = "nearest",
                    intersect = false
                },
                Scales = new
                {
                    y = new
                    {
                        Display = true
                    },
                    x = new
                    {
                        Display = true,
                        Ticks = new
                        {
                            maxRotation = 25
                        }

                    }
                },
                Plugins = new
                {
                    Tooltip = new
                    {
                        Intersect = false,
                        BackgroundColor = "#fff",
                        BodyColor = "#11273B",
                        BorderWidth = 1,
                        BorderColor = "#97B2C4",
                        DisplayColors = true,
                        TitleColor = "#11273B",
                        TitleFont = new
                        {Size ="16"}
                    },
                    Legend = new
                    {
                        Display = true,
                        Position = "top",
                        Labels = new
                        {
                            BoxWidth = 40,
                            BoxHeight = 11,
                            Color = "rgba(0, 32, 51, 0.70)",
                            Font = new
                            {
                                Family = "Inter",
                                Size = "14px",
                                
                            },
                            UsePointStyle = true,
                            Padding = 20
                        }
                    },
                },
            },
            Data = new
            {
                Datasets = datasets
            }
        };
        return config;
    }
    
        
    
}

