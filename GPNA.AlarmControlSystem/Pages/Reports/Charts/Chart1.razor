@inject IJSRuntime JSRuntime

@if (!IsEnableRenderChart)
{
     <Loader />
}
else
{
   <canvas id="@Id"></canvas> 
}

 
@code {
    bool IsEnableRenderChart = false;

    public enum ChartType
    {
        Pie,
        Bar,
        Line
    }

    [Parameter]
    public string? Id { get; set; }

    [Parameter]
    public ChartType? Type { get; set; }

    [Parameter]
    public int[]? Data1 { get; set; }

    [Parameter]
    public int[]? Data2 { get; set; }

    [Parameter]
    public int[]? Data3 { get; set; }

    [Parameter]
    public int[]? Data4 { get; set; }    
    [Parameter]
    public int[]? Data5 { get; set; }  

    [Parameter]
    public string[]? Labels { get; set; }

    [Parameter]
    public string? Label1 { get; set; }
    [Parameter]
    public string? Label2 { get; set; }
    [Parameter]
    public string? Label3 { get; set; }
    [Parameter]
    public string? Label4 { get; set; }

    public async Task Update()
    {
        await OnAfterRenderAsync(false);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        IsEnableRenderChart = false;

        var config = new
        {
            Type = "line",
            Options = new
            {
                Responsive = true,
                MaintainAspectRatio = false,

                Interaction = new
                {
                    Mode = "index"
                },
                Scales = new
                {
                    y = new
                    {
                        Display = true
                    },
                    x = new
                    {
                        Display = true,
                        Ticks = new
                        {
                            maxRotation = 25
                        }

                    }
                },
                Plugins = new
                {

                    Tooltip = new
                    {

                        Intersect = false,

                        BackgroundColor = "#fff",
                        BodyColor = "#11273B",
                        BorderWidth = 1,
                        BorderColor = "#97B2C4",
                        DisplayColors = true,
                        TitleColor = "#11273B",
                        TitleFont = new
                        {Size ="16"}
                    },
                    Legend = new
                    {
                        Display = true,
                        Position = "top"
                    },
                },
            },
            Data = new
            {
                Datasets = new[]
                {
                    new { Data = Data1, BackgroundColor= "#56B9F2", BorderColor = "#56B9F2", BorderWidth = "2",PointRadius="0",Label = "УПНГ", borderDash = new []{0, 0}},
                    new { Data = Data2, BackgroundColor= "#20B55F", BorderColor = "#20B55F", BorderWidth = "2",PointRadius="0",Label = "БМУПН", borderDash = new []{0, 0}},
                    new { Data = Data3, BackgroundColor= "#B556FF", BorderColor = "#B556FF", BorderWidth = "2",PointRadius="0",Label = "Скважины", borderDash = new []{0, 0}},
                    new { Data = Data4, BackgroundColor= "#F2C94C", BorderColor = "#F2C94C", BorderWidth = "2",PointRadius="0",Label = "Энергетика", borderDash = new []{0, 0}},
                    new { Data = Data5, BackgroundColor= "#EB3333", BorderColor = "#EB3333", BorderWidth = "2",PointRadius="0",Label = "KPI", borderDash = new []{5, 5}}
                },
                Labels = Labels
            }
        };
        IsEnableRenderChart = true;
        StateHasChanged();
        if (firstRender)
            await JSRuntime.InvokeVoidAsync("setup3", Id, config);
    }
}

