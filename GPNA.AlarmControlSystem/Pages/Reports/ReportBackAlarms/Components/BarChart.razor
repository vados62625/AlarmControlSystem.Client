@using GPNA.AlarmControlSystem.Models.Enums
@using GPNA.AlarmControlSystem.Models.Dto.BufferAlarms
@using GPNA.AlarmControlSystem.Models.Dto.IncomingAlarm
@inject IJSRuntime JSRuntime

<canvas id="@Id"></canvas>

@code {

    [Parameter]
    public Dictionary<DateTime, int>? IncomingAlarms { get; set; }

    [Parameter]
    public string? Id { get; set; } = "bar-chart";

    [Parameter]
    public int Kpi { get; set; }

    [Parameter]
    public bool IsEnableRenderChart { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await DrawChart();
    }

    protected async Task DrawChart()
    {
        if (IncomingAlarms is {Count: > 0 })
        {
            var numTime = IncomingAlarms.Select(kvPair => $"{kvPair.Key:M} {kvPair.Key:t}");

            var datasets = new[] { "value", "positiveDifference", "negativeDifference" };

            var armCount = datasets.ToDictionary(
                key => key,
                key =>
                {
                    return key switch
                    {
                        "value" =>
                            IncomingAlarms.Where(c => c.Key.Date >= DateTime.Now.Date.AddDays(-8)).Select(kvPair => kvPair.Value),
                        "positiveDifference" => 
                            IncomingAlarms.Where(c => c.Key.Date < DateTime.Now.Date.AddDays(-8)).Select(kvPair => kvPair.Value),
                        "negativeDifference" =>
                            IncomingAlarms.Where(c => c.Key.Date < DateTime.Now.Date.AddDays(-8)).Select(kvPair => kvPair.Value),
                        _ => throw new ArgumentOutOfRangeException(nameof(key), key, null)};
                });

            var config = new
            {
                Type = "bar",
                Options = new
                {
    // Animation = false,
    // Responsive = true,
    // MaintainAspectRatio = false,
    // Interaction = new
    // {
    //     Mode = "index"
    // },
                    responsive = true,
                    interaction = new
                    {
                        intersect = false,
                    },
                    Scales = new
                    {
                        x = new
                        {
                            stacked = true
                        },
                        y = new
                        {
                            stacked = true
                        }
    // y = new
    // {
    //     Display = true
    // },
    // x = new
    // {
    //     Display = true,
    //     Ticks = new
    //     {
    //         maxRotation = 25
    //     }
    // }
                    },
                    Plugins = new
                    {
    // Tooltip = new
    // {
    //     Intersect = false,
    //     BackgroundColor = "#fff",
    //     BodyColor = "#11273B",
    //     BorderWidth = 1,
    //     BorderColor = "#97B2C4",
    //     DisplayColors = true,
    //     TitleColor = "#11273B",
    //     TitleFont = new
    //     { Size = "16" }
    // },
                        Legend = new
                        {
                            Display = false,
    // Position = "top",
    // Labels = new
    // {
    //     BoxWidth = 40,
    //     BoxHeight = 11,
    //     Color = "rgba(0, 32, 51, 0.70)",
    //     Font = new
    //     {
    //         Family = "Inter",
    //         Size = "14px",
    //     },
    //     UsePointStyle = true,
    //     Padding = 20
    // }
                        },
                    },
                },
                Data = new
                {
                    Datasets = new[]
                    {
    // new { Data = armCount["value"], BackgroundColor = "#EB3333", BorderColor = "#EB3333", BorderWidth = "2", PointRadius = "0", Label = "Критичный" },
    // new { Data = armCount["positiveDifference"], BackgroundColor = "#F38B01", BorderColor = "#F38B01", BorderWidth = "2", PointRadius = "0", Label = "Высокий" },
    // new { Data = armCount["negativeDifference"], BackgroundColor = "#56B9F2", BorderColor = "#56B9F2", BorderWidth = "2", PointRadius = "0", Label = "Низкий" },
                        new { Data = armCount["value"], BackgroundColor = "#8BD3EF", Label = "Количество", stack = "Stack 0", },
                        new { Data = armCount["positiveDifference"], BackgroundColor = "#27BC2D33", Label = "Положительная разница", stack = "Stack 0", },
                        new { Data = armCount["negativeDifference"], BackgroundColor = "#E25757", Label = "Отрицательная разница", stack = "Stack 0", },
                    },
                    Labels = numTime
                }
            };
    // if (IsEnableRenderChart)
    // {
            await JSRuntime.InvokeVoidAsync("setupBarChart", Id!, config);
    // }
        }
    }

}