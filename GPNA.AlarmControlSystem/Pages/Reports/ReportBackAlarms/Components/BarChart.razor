@using GPNA.AlarmControlSystem.Models.Enums
@using GPNA.AlarmControlSystem.Models.Dto.BufferAlarms
@using GPNA.AlarmControlSystem.Models.Dto.IncomingAlarm
@using GPNA.AlarmControlSystem.Services
@inject IJSRuntime JSRuntime

<div style="height: 450px">
    <canvas id="@Id"></canvas>
</div>

@code {

    [Inject]
    protected ISpinnerService SpinnerService { get; set; } = default!;

    [Parameter]
    public Dictionary<AlarmType, Dictionary<DateTime, int>>? ExpiredAlarms { get; set; }

    [Parameter]
    public string? Id { get; set; } = "bar-chart";

    [Parameter]
    public int Kpi { get; set; }

    [Parameter]
    public bool IsEnableRenderChart { get; set; }

    [Parameter]
    public int? FieldId { get; set; }

    [Parameter]
    public AlarmType? AlarmType { get; set; }

    private bool _loaded;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (IsEnableRenderChart)
        {
            await SpinnerService.Load(DrawChart);
        }
    }

    protected async Task DrawChart()
    {
        if (!(ExpiredAlarms != null && AlarmType != null && ExpiredAlarms.TryGetValue(AlarmType!.Value, out var expiredAlarms)))
            expiredAlarms = GetDatesDict(DateTime.Now.AddDays(-16), DateTime.Now.AddDays(-1));
            if (expiredAlarms is {Count: > 0 })
            {
                var numTime = expiredAlarms.Select(kvPair => $"{kvPair.Key:M} {kvPair.Key:t}");

                var datasets = new[] { "value", "positiveDifference", "negativeDifference" };

                var armCount = datasets.ToDictionary(c => c, _ => new int[expiredAlarms.Values.Count]);

                armCount["value"] = expiredAlarms.Select(c => c.Value).ToArray();

                armCount["positiveDifference"][0] = 0;
                armCount["negativeDifference"][0] = 0;

                for (var i = 1; i < armCount.First().Value.Length; i++)
                {
                    var difference = armCount["value"][i] - (armCount["value"][i - 1] + armCount["negativeDifference"][i - 1]);

                    if (difference > 0)
                    {
                        armCount["value"][i] -= difference;
                        armCount["negativeDifference"][i] = difference;
                        armCount["positiveDifference"][i] = 0;
                    }
                    else
                    {
                        armCount["negativeDifference"][i] = 0;
                        armCount["positiveDifference"][i] = difference;
                    }
                }

                var config = new
                {
                    Type = "bar",
                    Options = new
                    {
                        Responsive = true,
                        MaintainAspectRatio = false,
                        Interaction = new
                        {
                            Intersect = false,
                        },
                        Scales = new
                        {
                            X = new
                            {
                                Stacked = true
                            },
                            Y = new
                            {
                                Stacked = true
                            }
                        },
                        Plugins = new
                        {
                            Legend = new
                            {
                                Display = false,
                            },
                        },
                    },
                    Data = new
                    {
                        Datasets = new[]
                        {
                            new { Data = armCount["value"], BackgroundColor = "#8BD3EF", Label = "Количество", Stack = "Stack 0", },
                            new { Data = armCount["positiveDifference"], BackgroundColor = "#27BC2D33", Label = "Положительная разница", Stack = "Stack 0", },
                            new { Data = armCount["negativeDifference"], BackgroundColor = "#E25757", Label = "Отрицательная разница", Stack = "Stack 0", },
                        },
                        Labels = numTime
                    }
                };

                await JSRuntime.InvokeVoidAsync("setupBarChart", Id!, config);
            }
    }
    
    private Dictionary<DateTime, int> GetDatesDict(DateTime start, DateTime end)
    {
        var dateTimes = Enumerable.Range(0, 1 + end.Subtract(start).Days)
            .Select(offset => start.AddDays(offset))
            .ToArray();

        return dateTimes.ToDictionary(dt => dt, _ => 0);
    }
        
    // private Dictionary<AlarmType, Dictionary<DateTimeOffset, int>> GetEventsDict(DateTimeOffset start, DateTimeOffset end)
    // {
    //     var events = Enum.GetValues(typeof(AlarmType)).Cast<AlarmType>().ToArray();
    //
    //     var dict = events.ToDictionary(c => c, _ => GetDatesDict(start, end));
    //
    //     return dict;
    // }

}