@using GPNA.AlarmControlSystem.Models.Enums
@using Microsoft.AspNetCore.Components
@using GPNA.AlarmControlSystem.Interfaces
@using GPNA.AlarmControlSystem.Models.Dto.BufferAlarms
@using GPNA.AlarmControlSystem.Models.Dto.IncomingAlarm

@inject IJSRuntime JSRuntime

@if (Tag is {TagName: { } } && Tag.Description!="ПЕРЕСМЕНКА")
{    
    string bgColor = ""; if (IsChildren) { bgColor = "rgba(0, 32, 51, 0.05);"; } 
    
    <tr class="item-table" style="cursor:pointer; background-color: @bgColor;">        
        <td @onclick="ShowMoreAttributes">@Tag.DateTimeActivation.ToString("d")</td>
        <td @onclick="ShowMoreAttributes">@Tag.DateTimeActivation.ToString("t")</td>

        <td colspan=3 @onclick="ShowMoreAttributes">@(Tag.TagName)
            @{
                string color = Tag.State switch
                {
                    StateType.HH or StateType.LL => "#EB3333",
                    StateType.H or StateType.L => "#F38B01",
                    _ => ""
                    };
            }
            @if (Tag.State != StateType.none)
            { <span >_<b style="color: @color;">@Tag.State</b></span> }
        </td>
        <td colspan=4 @onclick="ShowMoreAttributes"> @(Tag.Description ?? "N/A") </td>
        <td @onclick="ShowMoreAttributes">@Tag.Priority</td>
        <td @onclick="ShowMoreAttributes">@(Tag.AlarmLimit ?? "N/A") / @(Tag.Value ?? "N/A")</td>        
        <td class="item-table__checkbox" @onclick="SendTest"><input class="item-table__checkbox-input" type="checkbox" checked="@(Tag.StatusAlarm==StatusAlarmType.InWork)"/></td>
    </tr>
    
    @if (_displayComment || (Tag.Comment!=null && Tag.Comment.Length>0))
    {
        <tr>
            <td colspan="12" class="p-0 m-0">
                <input type="text" style="margin:0;padding:5px 10px;width:100%" @bind="Tag.Comment" @bind:event="oninput" @onkeydown="SaveComment">
            </td>                        
        </tr>
    }
    

} 
else if (Tag is {Description: "ПЕРЕСМЕНКА" })
{
    <tr class="item-table">        
        <td>@Tag.DateTimeActivation.ToString("d")</td>
        <td>@Tag.DateTimeActivation.ToString("t")</td>        
        <td colspan=11 style="text-align:center;font-weight:700;letter-spacing:10px;">@Tag.Description</td>              
    </tr>   
}

@code
{
    [Inject] IBufferAlarmService AlarmService { get; set; } = null!;
        
    [Parameter] public IncomingAlarmDto? Tag { get; set; }
    [Parameter] public bool IsChildren { get; set; } = false;

    bool _displayComment = false;
    bool _displayList = false;

    private async Task SaveComment(KeyboardEventArgs e)
    {
        if (e.Code is "Enter" or "NumpadEnter")
        {
            if (Tag is {Comment: { } })
            {
                var result = await AlarmService.AddComment(new AddCommentInAlarmCommand(){Id = Tag.Id, Comment = Tag.Comment});
                if (result.Success)
                    await JSRuntime.InvokeVoidAsync("saveComment", "snackbar");
            }
        }
    }

    private async Task SendTest()
    {
        if (Tag != null)
        {
            Tag.StatusAlarm = Tag is {StatusAlarm: StatusAlarmType.InWork } ? StatusAlarmType.Done : StatusAlarmType.InWork;
            var result = await AlarmService.ChangeStatus(new ChangeStatusAlarmCommand() {Id = Tag.Id, StatusAlarm = Tag.StatusAlarm});
            if (result.Success)
                await JSRuntime.InvokeVoidAsync("saveComment", "snackbar");
        }
    }

    void ShowMoreAttributes()
    {
        _displayComment = !_displayComment;
    }
    
}