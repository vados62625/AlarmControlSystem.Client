@page "/tasks/{taskId:int}"
@inherits AcsPageBase
@using GPNA.AlarmControlSystem.Models.Dto.TagTask
@using GPNA.AlarmControlSystem.Pages.Tasks.Modals
@using GPNA.AlarmControlSystem.Interfaces
@using GPNA.AlarmControlSystem.Models.Dto.Email
@using Blazored.Toast.Services

<div class="page-main">
<div class="page-header ">
    <a href="/tasks" class="bg-navigation">
        <svg>
            <use href="/img/icons/icons.svg#arrow-left"></use>
        </svg>
        <span>К списку задач</span>
    </a>

    <p>ЗАДАЧА <b># @TagTask?.Number</b></p>

    <div class="d-flex gap-2"></div>

</div>
<div class="d-flex flex-column overflow-auto gap-2">
    <div class="mesage-container w-100">
        <div class=" mesage-container flex-column">
            <div class="bg-message message-correspondents">
                <p>От кого:</p>
                <div class="d-flex justify-content-between">
                    <div>
                        @foreach (var senderPosition in SenderPositions)
                        {
                            var senderHash = senderPosition.GetHashCode().ToString();
                            <div class="recipient-selector d-flex justify-content-between pb-2">
                                <div class="form-check">
                                    <input class="form-check-input" type="radio" id="radio-@senderHash" name="message-sender-radio"
                                           checked="@(SenderPosition == senderPosition)"
                                           onchange="@(() => ChangeSenderPosition(senderPosition))"/>
                                    <label class="form-check-label" for="radio-@senderHash">
                                        @senderPosition
                                    </label>
                                </div>
                            </div>
                        }
                    </div>
                    <div class="recipient-name w-50 p-1 input-group d-flex align-items-center">
                        <input class="border" style="outline: none" type="text" placeholder="ФИО" @bind="SenderName"/>
                    </div>
                </div>
            </div>
            <div class="bg-message message-body">
                <p> Тело письма:</p>
                <textarea type="text" placeholder="Текст письма" @bind="MessageInputText" @bind:event="oninput"></textarea>
                <div class="d-flex align-self-end gap-2 w-100 justify-content-end">
                    @if (TagTask is {Archived: false })
                    {
                        <button class="me-auto" @onclick="ArchiveTask">
                            <svg>
                                <use href="/img/icons/icons.svg#archive"></use>
                            </svg>
                            <span>В архив</span>
                        </button>
                    }
                    <button @onclick="Cancel">
                        <svg>
                            <use href="/img/icons/icons.svg#task-message-cancel"></use>
                        </svg>
                        <span>Отменить</span>
                    </button>
                    <button disabled="@string.IsNullOrWhiteSpace(MessageInputText)" @onclick="SendEmails">
                        <svg>
                            <use href="/img/icons/icons.svg#task-message-send"></use>
                        </svg>
                        <span>Разослать</span>
                    </button>
                </div>
            </div>
        </div>
        <div class="bg-message message-story">
            <p>История</p>
            <div class="message-story-container" id="message-story-container">
                @foreach (var message in TagTask!.EmailMessages)
                {
                    <div class="message-story-item">
                        <div class="d-flex gap-2 align-items-center">
                            <p>@message.Producer</p>
                        </div>
                        <p>@message.Message</p>
                        <p class="message-story-item-date">@message.DateTimeSent.ToString("dd.MM.yyyy HH:mm")</p>
                    </div>
                }
            </div>
        </div>

    </div>
</div>
</div>


@code {

    [Inject]
    IToastService? ToastService { get; set; }
    
    [Inject]
    IJSRuntime? JsRuntime { get; set; }
    
    [Inject]
    ITagTaskService? TagTaskService { get; set; }

    [Inject]
    IEmailService? EmailService { get; set; }

    [Parameter]
    public int TaskId { get; set; }

    [CascadingParameter]
    public IModalService? Modal { get; set; }

    private TagTaskDto TagTask { get; set; } = new();

    private static readonly string[] SenderPositions = 
    {
        "Технолог (промысел)",
        "Технолог (офис)",
        "Инженер АСУТП (промысел)",
        "Инженер АСУТП (офис)",
        "Начальник смены",
        "Начальник цеха",
    };

    private string MessageInputText { get; set; } = string.Empty;
    private string SenderName { get; set; } = string.Empty;
    private string SenderPosition { get; set; } = SenderPositions[0];
    

    protected override async Task LoadPageAsync()
    {
        await GetTagTask();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await Task.Delay(500); 
        await JsRuntime.InvokeVoidAsync("scrollChatToBottom"); 
    }

    private async Task ArchiveTask()
    {
        if (TagTask is {Archived: false } && Modal != default)
        {
            var parameters = new ModalParameters { { "TaskNumber", TagTask.Number.ToString() } };
            var modal = Modal.Show<ArchiveTaskModal>("", parameters);
            var modalResult = await modal.Result;
            if (modalResult.Confirmed)
            {
                var result = await TagTaskService?.UpdateTagTask(new UpdateTagTaskCommand { Id = TagTask.Id, Archived = true })!;

                if (result.Success)
                {
                    Cancel();
                }
            }
        }
    }

    private async Task GetTagTask()
    {
        if (TagTaskService == default) return;

        var result = await TagTaskService.GetTagTasksCollection(new GetTagTasksListQuery { Id = TaskId });

        if (result.Success && result.Payload.Items.Any())
        {
            TagTask = result.Payload.Items.First();
        }
    }

    private async Task SendEmails()
    {
        var command = new SendTaskMessageCommand
        {
            TagTaskId = TaskId,
            Sender = $"{SenderName} ({SenderPosition})",
            MessageText = MessageInputText
        };

        var messageSent = await EmailService.SendTaskMessage(command);

        if (!messageSent)
        {
            ToastService?.ShowError("Ошибка отправки сообщения");
            return;
        }

        // var modal = Modal!.Show<EmailSuccessModal>();
        await LoadPageAsync();
    }

    private void Cancel()
    {
        NavigationManager?.NavigateTo("/tasks");
    }

    private void ChangeSenderPosition(string position)
    {
        SenderPosition = position;
    }

}