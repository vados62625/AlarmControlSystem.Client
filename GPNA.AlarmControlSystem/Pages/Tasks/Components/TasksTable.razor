@using GPNA.AlarmControlSystem.Models.Dto.IncomingAlarm
@using GPNA.AlarmControlSystem.Models.Enums
@using GPNA.AlarmControlSystem.Pages.Monitoring.Components
@using GPNA.AlarmControlSystem.Models.Dto.BufferAlarms
@using GPNA.AlarmControlSystem.Models.Dto.TagTask

<table class="bg-task-table">
    <thead>
    <tr>
        <th class="bg-task-table-button" style="min-width: 60px;">
            <div>
                <svg class="task-table-status-icon">
                    <use href="/img/icons/icons.svg#task-process"></use>
                </svg>
                <button>
                    <svg>
                        <use href="/img/icons/icons.svg#filter"></use>
                    </svg>
                </button>
            </div>
        </th>
        <th class="bg-task-table-button">
            <div>
                <p>Задача</p>
                <button onclick="@(async () => await OnOrderingChanged.InvokeAsync(nameof(TagTaskDto.Number)))">
                    <svg>
                        <use href="/img/icons/icons.svg#sorting"></use>
                    </svg>
                </button>
            </div>
        </th>
        <th class="bg-task-table-button" style="min-width: 90px;">
            <div>
                <p>Дата</p>
                <button onclick="@(async () => await OnOrderingChanged.InvokeAsync(nameof(TagTaskDto.CreatedAt)))">
                    <svg>
                        <use href="/img/icons/icons.svg#sorting"></use>
                    </svg>
                </button>
            </div>
        </th>
        <th class="bg-task-table-button" style="min-width: 90px;">
            <div>
                <p>Время</p>
                <button>
                    <svg>
                        <use href="/img/icons/icons.svg#sorting"></use>
                    </svg>
                </button>
            </div>
        </th>
        <th class="bg-task-table-button" style="min-width: 90px;">
            <div>
                <p>Повторений</p>
                <button>
                    <svg>
                        <use href="/img/icons/icons.svg#sorting"></use>
                    </svg>
                </button>
            </div>
        </th>
        <th class="bg-task-table-button" style="min-width: 90px;">
            <div>
                <p>Длительность</p>
                <button>
                    <svg>
                        <use href="/img/icons/icons.svg#sorting"></use>
                    </svg>
                </button>
            </div>
        </th>
        <th class="bg-task-table-button" style="min-width: 90px;">
            <div>
                <p>Журнал</p>
                <button>
                    <svg>
                        <use href="/img/icons/icons.svg#sorting"></use>
                    </svg>
                </button>
            </div>
        </th>
        <th class="bg-task-table-button">
            <div>
                <p>Таг</p>
                <button>
                    <svg>
                        <use href="/img/icons/icons.svg#search"></use>
                    </svg>
                </button>
            </div>
        </th>
        <th class="bg-task-table-button" style="min-width: 120px;">
            <div>
                <p>Статус</p>
                <div>
                    <button data-bs-toggle="modal" data-bs-target="#stateFilterModal">
                        <svg>
                            <use href="/img/icons/icons.svg#filter"></use>
                        </svg>
                    </button>
                    <button onclick="@(async () => await OnOrderingChanged.InvokeAsync(nameof(TagTaskDto.Tag.State)))">
                        <svg>
                            <use href="/img/icons/icons.svg#sorting"></use>
                        </svg>
                    </button>
                </div>
            </div>
        </th>
        <th>
            <p>Описание</p>
        </th>
        <th class="bg-task-table-button" style="min-width: 120px;">
            <div>
                <p>Приоритет</p>
                <div>
                    <button data-bs-toggle="modal" data-bs-target="#priorityFilterModal">
                        <svg>
                            <use href="/img/icons/icons.svg#filter"></use>
                        </svg>
                    </button>
                    <button onclick="@(async () => await OnOrderingChanged.InvokeAsync(nameof(TagTaskDto.Tag.Priority)))">
                        <svg>
                            <use href="/img/icons/icons.svg#sorting"></use>
                        </svg>
                    </button>
                </div>
            </div>
        </th>
        <th style="min-width: 150px;">
            <p>Уставка/значение</p>
        </th> 
    </tr>
    </thead>
    <tbody>        
    @if(Tasks is {Items: { } } )
    {
        @foreach (var task in Tasks.Items)
        {
            <TaskLine Task="@task"/>
        }
    }
    </tbody>
</table>

@if (Tasks?.Items == null || !Tasks.Items.Any())
{
    <div class="p-4 text-center">
        <p>Нет данных</p>
    </div>
}

@code {
    [Parameter]
    public TagTasksCollection? Tasks { get; set; }

    [CascadingParameter(Name = nameof(StateFilter))]
    public StateType? StateFilter { get; set; }

    [CascadingParameter(Name = nameof(PriorityFilter))]
    public PriorityType? PriorityFilter { get; set; }

    [Parameter]
    public EventCallback<StateType?> OnStateFilterChanged { get; set; }

    [Parameter]
    public EventCallback<PriorityType?> OnPriorityFilterChanged { get; set; }

    [Parameter]
    public EventCallback<string> OnOrderingChanged { get; set; }

    private async Task SetStateFilter(StateType? state)
    {
        await OnStateFilterChanged.InvokeAsync(state);
    }

}