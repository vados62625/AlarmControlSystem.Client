@page "/"
@using GPNA.AlarmControlSystem.Pages.Main.Components.WorkStationView
@using GPNA.AlarmControlSystem.Models.Dto.Field
@using GPNA.AlarmControlSystem.Interfaces
@using GPNA.AlarmControlSystem.Models.Dto.Queries
@using GPNA.AlarmControlSystem.Models.Dto.Workstation
@using GPNA.AlarmControlSystem.Options
@using GPNA.AlarmControlSystem.Services
@using Microsoft.Extensions.Options
@inject IJSRuntime JsRuntime


<div class="page-main">
    <div class="page-header justify-content-center">
        @if (_fields is {Length: > 2 })
        {
            <ButtonNavigation Title="@_fields[2].Name" Href="@("/?fieldId=" + _fields[2].Id)"/>
        }
        <div class="d-flex align-items-center">
            <p>ЖУРНАЛ СИГНАЛИЗАЦИЙ ЗА @DateTime.ToString("dd MMMM") @(Options?.Value.DoName ?? "N/A") <b>@(_fields?.FirstOrDefault(f => f.Id == FieldId)?.Name ?? "N/A")</b></p>
            <SelectObject Object="dto" LinksDictionary="ArmLinksDictionary"/>
        </div>
        @if (_fields is {Length: > 1 })
        {
            <ButtonNavigation Title="@_fields[1].Name" Href="@("/?fieldId=" + _fields[1].Id)" Navigation="right"/>
        }
    </div>
    @if (_workstations != default)
    {
        foreach (var workstation in _workstations)
        {
            <WorkStationView Workstation="workstation"/>
        }
    }
</div>

@code {

    [Inject]
    private IOptions<AcsModuleOptions>? Options { get; set; }
    
    [Inject]
    private IFieldService? FieldService { get; set; }

    [Inject]
    private IWorkStationService? WorkStationService { get; set; }

    [Inject]
    protected ISpinnerService SpinnerService { get; set; } = default!;

    [Parameter]
    public DateTimeOffset DateTime { get; set; } = DateTimeOffset.Now;
    // public DateTimeOffset DateTime { get; set; } = new(2023, 8, 3, 22, 0, 0, DateTimeOffset.Now.Offset);

    [Parameter]
    [SupplyParameterFromQuery]
    public int? FieldId { get; set; }

    private bool IsEnableRenderChart { get; set; }

    private FieldDto[]? _fields;

    private WorkstationMainPageDto[]? _workstations;

    private IDictionary<string, string>? ArmLinksDictionary { get; set; }

    protected override async Task OnInitializedAsync()
    {
        IsEnableRenderChart = false;
        SpinnerService.Show();

        await InitializePageAsync();

        SpinnerService.Hide();
        IsEnableRenderChart = true;

        await base.OnInitializedAsync();
    }

    private async Task InitializePageAsync()
    {
        await GetFields();

        FieldId ??= _fields?.FirstOrDefault()?.Id ?? 1;

        await GetWorkstations();

        FillArmLinks();
    }

    private async Task GetFields()
    {
        if (FieldService != null)
        {
            var result = await FieldService.GetList();

            if (result.Success)
            {
                _fields = result.Payload.ToArray();
            }
        }
    }

    private async Task GetWorkstations()
    {
        if (WorkStationService != null && FieldId != null)
        {
            var query = new GetAlarmsCountForFieldQuery { FieldId = FieldId.Value, ActivationFrom = DateTime.AddDays(-7), ActivationTo = DateTime };
            var result = await WorkStationService.GetWorkstationsWithStatistics(query);

            if (result.Success)
            {
                _workstations = result.Payload.ToArray();
            }
        }
    }

    private void FillArmLinks()
    {
        if (_fields != null && _fields.Any())
        {
            ArmLinksDictionary = _fields.ToDictionary(field => field.Name, field => $"/?fieldId={field.Id}");
        }
    }

}