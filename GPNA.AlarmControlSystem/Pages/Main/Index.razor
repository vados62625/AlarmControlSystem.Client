@page "/"
@using GPNA.AlarmControlSystem.Pages.Main.Components.WorkStationView
@using GPNA.AlarmControlSystem.Models.Dto.Field
@using GPNA.AlarmControlSystem.Interfaces
@using GPNA.AlarmControlSystem.Models.Dto.Queries
@using GPNA.AlarmControlSystem.Services
@inject IJSRuntime JsRuntime


<div class="page-main">
    <div class="page-title">
        <ButtonNavigation Title="Меретояхинское"/>
        <div class="d-flex align-items-center">
            <p>ЖУРНАЛ СИГНАЛИЗАЦИЙ ЗА @DateTime.ToString("dd MMMM") МЕРЕТОЯХА <b>@(_field?.Name ?? "N/A")</b></p>
            <SelectObject Object="dto"/>
        </div>
        <ButtonNavigation Title="Северо-Самбурское" Navigation="right"/>
    </div>
    @if (_field != default)
    {
        foreach (var workstation in _field.Workstations)
        {
            <WorkStationView Workstation="workstation"/>
        }
    }
</div>
@if (!IsEnableRenderChart)
{
    <Loader/>
}

@code {

    [Inject]
    private IFieldService? FieldService { get; set; }

    [Inject]
    protected ISpinnerService SpinnerService { get; set; } = default!;

    [Parameter]
    public DateTimeOffset DateTime { get; set; } = new(2023, 8, 3, 22, 0, 0, DateTimeOffset.Now.Offset);

    // public DateTimeOffset DateTime { get; set; } = DateTimeOffset.Now;

    [Parameter]
    [SupplyParameterFromQuery]
    public int? FieldId { get; set; }
    
    private bool IsEnableRenderChart { get; set; }


    private FieldMainPageDto? _field;

    protected override async Task OnInitializedAsync()
    {
        IsEnableRenderChart = false;
        SpinnerService.Show();
        
        await InitializeFieldModel();
        
        SpinnerService.Hide();
        IsEnableRenderChart = true;

        await base.OnInitializedAsync();
    }

    private async Task InitializeFieldModel()
    {
        FieldId ??= 1;

        if (FieldService != null)
        {
            var query = new GetAlarmsCountForFieldQuery { FieldId = FieldId.Value, ActivationFrom = DateTime.AddDays(-7), ActivationTo = DateTime };

            var result = await FieldService.GetField(query);

            if (result.Success)
            {
                _field = result.Payload;
            }
        }
    }

}