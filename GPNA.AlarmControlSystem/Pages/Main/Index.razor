@page "/"
@using LocalDbStorage.Repositories.Models
@using LocalDbStorage.Interfaces

@using System.Text.Json;
@using GPNA.AlarmControlSystem.Pages.Main.Tables
@using GPNA.AlarmControlSystem.Pages.Main.Charts
@using LocalDbStorage.Repositories.Models.Enum
@using LocalDbStorage.Services

<CascadingValue Name="From" Value="@From">
<CascadingValue Name="To" Value="@To">
@if (InputAlarms == null)
{
    <Loader/>
}
else
{
<div style="display:flex; justify-content:space-evenly;margin-top:50px;">
    <div style="display:flex;flex-direction:column;align-content:center;">
        <h4>Количество сигнализаций за @To.ToString("M")</h4>
        <div style="height:340px;display: flex;justify-content: center; align-items: center; max-width:420px;margin: auto;position:relative;">
            <DoughnutChart Id="donutChart1" Data1="@CountDayPriority"/>
            <p style="position: absolute; margin-top: 50px; font-size: 50px;" title="Среднее число входящих сигнализаций">@CountDay</p>
        </div>
    </div>
    <div style="display:flex;flex-direction:column;align-content:center;">
        <h4>Количество сигнализаций за @To.ToString("M") от разных датчиков</h4>
        <div style="height:340px;display: flex;justify-content: center; align-items: center;max-width:420px;margin: auto; position:relative;">
            <DoughnutChart Id="donutChart2" Data1="@CountSensorsDayPriority"/>
            <p style="position: absolute;   margin-top: 50px; font-size: 50px;" title="Среднее число входящих сигнализаций">@CountSensorsDay</p>
        </div>
    </div>
</div>

<div style="display:flex;gap:20px;justify-content: space-evenly;">
    <IncomingAlarms/>
    <ActiveAlarms/>
    <SuppressedAlarms/>
</div>

<h4>Активные сигнализации (Просроченные)</h4>
<ActiveAlarmsOverdue/>
<h4>Подавленные сигнализации (Просроченные)</h4>
<SuppressedAlarmsOverdue/>    

}
</CascadingValue>
</CascadingValue>


@code {
    [Parameter] public string? Title { get; set; }

	[Inject] IIncomingAlarmService IncomingAlarmService { get; set; } = null!;
	[Inject] IActiveAlarmService ActiveAlarmService { get; set; } = null!;
	[Inject] ISuppressedAlarmService SuppressedAlarmService { get; set; } = null!;
	[Inject] ITagService TagService { get; set; } = null!;

    [CascadingParameter(Name = "From")] public DateTime From { get; set; }
    [CascadingParameter(Name = "To")] public DateTime To { get; set; }
    

    string[] CountDayPriority = new string[3];
    string[] CountSensorsDayPriority = new string[3];

    int CountDay = 0;
    int CountSensorsDay = 0;

    public List<List<IncomingAlarm>>? InputAlarms;

    void SelectPriority()
    {

    }


    protected override async Task OnInitializedAsync()
    {
	    //var test2 = await ActiveAlarmService.GetAllActiveAlarms(1);
	    //var test = await ActiveAlarmService.GetAllAlarms();

        //TODO не понял почему ты берешь данные которые были две недели назад 
	    //var now = DateTime.Now;
     //   var i = -(int)now.DayOfWeek;
     //   To = now.AddDays(i);
     //   To = new DateTime(To.Year , To.Month, To.Day, 23,59,59);
     //   From = To.AddDays(-6);
     //   From = new DateTime(From.Year , From.Month, From.Day, 0,0,0);

	    To = DateTime.Now.AddDays(-1);
	    From = DateTime.Now.AddDays(-8);


        InputAlarms = null;
        CountDayPriority = new string[3];
        CountSensorsDayPriority = new string[3];
        int[] countDayPriority = new int[3];
        int[] countSensorsDayPriority = new int[3];
        var tags = await IncomingAlarmService.GetAlarmsPerDate(1,From,To);

        InputAlarms = tags; 

        if(InputAlarms!=null)
            foreach(var c in InputAlarms)
            {
                if(c[0].Date.Date == To.Date && c[0].Priority != PriorityType.Information && c[0].Priority != PriorityType.None)
                {
                    if (c[0].Priority == PriorityType.Low)
                    {
                        countDayPriority[2] += c.Count;
                        countSensorsDayPriority[2] += 1;
                    }
                    if (c[0].Priority == PriorityType.High)
                    {
                        countDayPriority[1] += c.Count;
                        countSensorsDayPriority[1] += 1;
                    }
                    if (c[0].Priority == PriorityType.Urgent)
                    {
                        countDayPriority[0] += c.Count;
                        countSensorsDayPriority[0] += 1;
                    }

                    CountDay += c.Count;
                    CountSensorsDay += 1;
                }
            }       

        CountDayPriority[0] = countDayPriority[0].ToString();
        CountDayPriority[1] = countDayPriority[1].ToString();
        CountDayPriority[2] = countDayPriority[2].ToString();
        
        CountSensorsDayPriority[0] = countSensorsDayPriority[0].ToString();
        CountSensorsDayPriority[1] = countSensorsDayPriority[1].ToString();
        CountSensorsDayPriority[2] = countSensorsDayPriority[2].ToString();
    }
}