@using GPNA.AlarmControlSystem.Services
@using GPNA.AlarmControlSystem.Pages.Main.Alarms
@using GPNA.AlarmControlSystem.Models.Enums
@using GPNA.AlarmControlSystem.Interfaces
@using GPNA.AlarmControlSystem.Models.Dto.ActiveAlarm
@using GPNA.AlarmControlSystem.Models.Dto.BufferAlarms

<div class="table-responsive" style="margin-top:10px;border-top: 0.5px solid rgba(0, 65, 102, 0.2);border-bottom: 0.5px solid rgba(0, 65, 102, 0.2);">
        <table class="table table-bordered">
            <thead class="thead-light">
                <tr>
	                <th>Дата начала сигнализации</th>	          
	                <th>Длительность (в часах)</th>
                    <th colspan=2>Таг</th>
                    <th colspan=4>Описание</th>
                    <th>Приоритет 
                    <select @bind="@Priority" @onclick="OnParametersSetAsync">
                        <option value="">Все</option>
                        <option value="@PriorityType.Urgent">Критический</option>
                        <option value="@PriorityType.High">Высокий</option>
                        <option value="@PriorityType.Low">Низкий</option>
                        <option value="@PriorityType.Information">Инфо</option>
                        <option value="@PriorityType.None">Без приорит.</option>                        
                    </select>
                </th>
                    <th>Уставка/Значение</th>        
                </tr>            
            </thead>
            <tbody style="height:500px;overflow-y:auto;">
            @if(Alarms == null)
            {
                <Loader/>
            }
            else
            {                
                foreach (var context in Alarms)
                {
                    <ActiveAlarmComponent Tag="@context"/>         
                }             
            }
            </tbody>
        </table>
    </div>


@code {
    [Inject] IBufferAlarmService AlarmService { get; set; } = default!;
	[Inject] IActiveAlarmService ActiveAlarmService { get; set; } = default!;
    [Inject]
    protected ISpinnerService SpinnerService { get; set; } = default!;

    [Parameter] public List<ActiveAlarmDto>? Alarms { get; set; } = new();

    [Parameter] public PriorityType? Priority { get; set; }

    [CascadingParameter(Name = "From")] public DateTimeOffset From { get; set; }
    [CascadingParameter(Name = "To")] public DateTimeOffset To { get; set; }

    int _workStation = 1;

    protected override async Task OnParametersSetAsync()
    {
        SpinnerService.Show();
        Alarms = new();
        var result = await ActiveAlarmService.GetCollection(new GetActiveAlarmsListQuery() {WorkStationId = _workStation});
        if (result.Success)
        {
            var activeAlarms = result.Payload.Items;
            foreach (var alarm in activeAlarms.Where(alarm => (alarm.Duration?.TotalHours ?? 0) > 72))
            {
                Alarms.Add(alarm);
            }

            if (Priority != null)
            {
                var alarms = new List<ActiveAlarmDto>();
                foreach (var context in Alarms)
                {
                    if (Priority == context.Priority || Priority == null)
                    {
                        alarms.Add(context);
                    }
                }
                Alarms = alarms;
            }

            Alarms = Alarms?.OrderByDescending(c => c.DateTimeActivation).ToList();
        }

        SpinnerService.Hide();
    }
}
