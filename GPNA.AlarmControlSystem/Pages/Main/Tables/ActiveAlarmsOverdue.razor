@using LocalDbStorage.Interfaces
@using LocalDbStorage.Repositories.Models
@using GPNA.AlarmControlSystem.Pages.Main.Alarms
@using ActiveAlarmDto = LocalDbStorage.Dto.ActiveAlarmDto

<div class="table-responsive" style="margin-top:10px;border-top: 0.5px solid rgba(0, 65, 102, 0.2);border-bottom: 0.5px solid rgba(0, 65, 102, 0.2);">
        <table class="table table-striped table-bordered">
            <thead class="thead-light">
                <tr>
	                <th>Дата начала сигнализации</th>
	             @*   TODO временно endDate в контроллере не используется*@
	                @*  <th>Дата окончания сигнализации</th>*@ 
	          
	                <th>Длительность (в часах)</th>
                    <th>Таг</th>
                    <th colspan=4>Описание</th>
                    <th>Приоритет 
                        <select @bind="@Priority" @onabort="OnParametersSet">
                            <option value="5">Все</option>
                            <option value="4">Критический</option>
                            <option value="3">Высокий</option>
                            <option value="2">Низкий</option>
                        </select>
                    </th>
                    <th>Уставка/Значение</th>        
                </tr>            
            </thead>
            <tbody>
                @if(Alarms == null)
                {
                    <Loader/>
                }
                else
                {
                    <Virtualize Items="Alarms" OverscanCount="10">        
           
                            <ActiveAlarmComponent @key="context.Id" Tag="@context"/>
            
                    </Virtualize>
                }
            </tbody>
        </table>
    </div>


@code {
    [Inject] IActiveAlarmService ActiveAlarmService { get; set; } = default!;

    [Parameter] public List<ActiveAlarmDto>? Alarms { get; set; } = new();

    [Parameter] public int? Priority { get; set; } = 5;

    [CascadingParameter(Name = "From")] public DateTime From { get; set; }
    [CascadingParameter(Name = "To")] public DateTime To { get; set; }

    protected override async Task OnInitializedAsync()    
    {
        var activeAlarms= await ActiveAlarmService.GetScopeAlarms(1, From, To);
	    activeAlarms.OrderBy(c => c.DateTime).ToList();
	    foreach (var alarm in activeAlarms)
        {
            if (alarm!=null &&  (alarm.Duration!=null ? alarm.Duration.Value.TotalHours : 0)  > 72)
            {
                Alarms.Add(alarm);
            }
        }     
        if (Alarms!=null)
            Alarms = Alarms.OrderByDescending(c => c.DateTime).ToList();
    }

    protected override void OnParametersSet()
    {
        //if (Priority != 5)
        //{
        //    var alarms = new List<ActiveAlarm>();
        //    foreach (var item in Alarms ?? new List<ActiveAlarm>())
        //    {
        //        if (Convert.ToInt32(item.Priority) == Priority)
        //        {
        //            alarms.Add(item);
        //        }
        //    }
        //    Alarms = alarms;
        //}
    }
}
