@using GPNA.AlarmControlSystem.Pages.Main.Alarms
@using GPNA.AlarmControlSystem.Models.Dto.BufferAlarms
@using GPNA.AlarmControlSystem.Interfaces
@using GPNA.AlarmControlSystem.Models.Enums
@using GPNA.AlarmControlSystem.Services


<div class="table-responsive" style="margin-top:10px;border-top: 0.5px solid rgba(0, 65, 102, 0.2);border-bottom: 0.5px solid rgba(0, 65, 102, 0.2);">
    <table class="table table-bordered">
        <thead class="thead-light">
            <tr>
                <th>Дата последней сигнализации</th>
                <th>Время последней сигнализации</th>
                <th>Длительность (в часах)</th>
                <th>Таг</th>
                <th colspan=4>Описание</th>
                <th>Приоритет 
                    <select @bind="@Priority" @onabort="OnParametersSet">
                        <option value="5">Все</option>
                        <option value="4">Критический</option>
                        <option value="3">Высокий</option>
                        <option value="2">Низкий</option>
                    </select>
                </th>
                <th>Уставка/Значение</th>      
            </tr>            
        </thead>
        <tbody>
            @if(Alarms == null)
            {
                <Loader/>
            }
            else
            {
                <Virtualize Items="Alarms">        
                    <ItemContent>
                        <SuppressedAlarmComponent @key="context.Id" Tag="@context"/>
                    </ItemContent>        
                    <Placeholder>
                        <Loader/>
                    </Placeholder>
                </Virtualize>
            }
        </tbody>  
    </table>
</div>



@code {
    [Inject] IBufferAlarmService AlarmService { get; set; } = null!;
    [Inject]
    protected ISpinnerService SpinnerService { get; set; } = default!;
    
    [Parameter] public List<SuppressedAlarmDto>? Alarms { get; set; } = new();

    [Parameter] public PriorityType? Priority { get; set; }

    [CascadingParameter(Name = "From")] public DateTime From { get; set; }
    [CascadingParameter(Name = "To")] public DateTime To { get; set; }

    int _workStation = 1;

    protected override async Task OnParametersSetAsync()
    {
        SpinnerService.Show();
        Alarms = new();
        var result = await AlarmService.GetAllSuppressedAlarms(_workStation);
        if (result.Success)
        {
            var suppressedAlarms = result.Payload.Items;
            foreach (var alarm in suppressedAlarms.Where(alarm => (alarm.Duration?.TotalHours ?? 0) > 720))
            {
                Alarms.Add(alarm);
            }

            if (Priority != null)
            {
                var alarms = new List<SuppressedAlarmDto>();
                foreach (var context in Alarms)
                {
                    if (Priority == context.Priority || Priority == null)
                    {
                        alarms.Add(context);
                    }
                }
                Alarms = alarms;
            }

            Alarms = Alarms?.OrderByDescending(c => c.DateTimeActivation).ToList();
        }

        SpinnerService.Hide();
    }
}
