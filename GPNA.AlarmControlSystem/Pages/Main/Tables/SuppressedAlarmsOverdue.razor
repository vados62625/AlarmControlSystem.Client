@using LocalDbStorage.Interfaces
@using LocalDbStorage.Repositories.Models
@using GPNA.AlarmControlSystem.Pages.Monitoring.Alarms
@using LocalDbStorage.Dto

<div class="table-responsive" style="margin-top:10px;border-top: 0.5px solid rgba(0, 65, 102, 0.2);border-bottom: 0.5px solid rgba(0, 65, 102, 0.2);">
    <table class="table table-striped table-bordered">
        <thead class="thead-light">
            <tr>
                <th>Дата последней сигнализации</th>
                <th>Время последней сигнализации</th>
                <th>Длительность (в часах)</th>
                <th>Таг</th>
                <th>Описание</th>
                <th>Приоритет 
                    <select @bind="@Priority" @onabort="OnParametersSet">
                        <option value="5">Все</option>
                        <option value="4">Критический</option>
                        <option value="3">Высокий</option>
                        <option value="2">Низкий</option>
                    </select>
                </th>
                <th>Уставка/Значение</th>      
            </tr>            
        </thead>
        <tbody>
            @if(Alarms == null)
            {
                <Loader/>
            }
            else
            {
                <Virtualize Items="Alarms">        
                    <ItemContent>
                        <SuppressedAlarmComponent @key="context.Id" Tag="@context"/>
                    </ItemContent>        
                    <Placeholder>
                        <Loader/>
                    </Placeholder>
                </Virtualize>
            }
        </tbody>  
    </table>
</div>



@code {
    [Inject] ISuppressedAlarmService SuppressedAlarmService { get; set; } = null!;

    [Parameter] public List<SuppressedAlarmDto>? Alarms { get; set; } = new();

    [Parameter] public int? Priority { get; set; } = 5;

    [CascadingParameter(Name = "From")] public DateTime From { get; set; }
    [CascadingParameter(Name = "To")] public DateTime To { get; set; }

    protected override async Task OnInitializedAsync()    
    {
        var suppressedAlarms= await SuppressedAlarmService.GetScopeAlarms(1, From, To);

        foreach (var alarm in suppressedAlarms)
        {
            if (alarm!=null &&  (alarm.Duration!=null ? alarm.Duration.Value.TotalHours : 0)  > 720)
            {
                Alarms.Add(alarm);
            }
        }
        if (Alarms!=null)
            Alarms = Alarms.OrderByDescending(c => c.DateTime).ToList();
    }

    protected override void OnParametersSet()
    {
        //if (Priority != 5)
        //{
        //    var alarms = new List<SuppressedAlarm>();
        //    foreach (var item in Alarms ?? new List<SuppressedAlarm>())
        //    {
        //        if (Convert.ToInt32(item.Priority) == Priority)
        //        {
        //            alarms.Add(item);
        //        }
        //    }
        //    Alarms = alarms;
        //}
    }
}
