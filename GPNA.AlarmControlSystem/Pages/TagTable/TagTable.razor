@page "/tagtable"
@using GPNA.AlarmControlSystem.Pages.TagTable.Modals
@using GPNA.AlarmControlSystem.Services
@using LocalDbStorage.Repositories.Models
@using LocalDbStorage.Interfaces
@using GPNA.AlarmControlSystem.Pages.TagTable.Components

<h3>Таблица переменных</h3>
<div class="actions">
    <input type="text" id="myInput" @onkeypress="@Enter" @bind-value="input" placeholder="Поиск по TagName">
    <button class="actions-add-tag btn-primary" @onclick="AddTag">Добавить Tag</button>
</div>


@if (AlarmsTagTable == null)
{
    @*<Loader/>*@
}
else
{
    <div class="table-responsive" style="margin-top:10px;height:780px;overflow-y:scroll;border-top: 0.5px solid rgba(0, 65, 102, 0.2);border-bottom: 0.5px solid rgba(0, 65, 102, 0.2);">
        <table class="table table-striped table-bordered">
            <thead class="thead-light">
                <tr>
                    <th colspan=2>Позиция по ГП</th>
                    <th colspan=2>TagName</th>
                    <th colspan=6>Описание</th>            
                    <th>Приоритет</th>
                    <th>Уставка</th>         
                    <th style="z-index: 1;"></th> 
                </tr>
            </thead>
            <tbody>
                <Virtualize Items="AlarmsTagTable">
                    <ItemContent>
                        <TagOnTable @key="context.Id" Tag="@context" EditTag="@EditTag" DeleteTag="@DeleteTag"/>
                    </ItemContent>
                    <Placeholder>
                        <Loader/>
                    </Placeholder>
                </Virtualize>
            </tbody>
        </table>
    </div>   
}



@code {
    [Inject]
    protected ISpinnerService SpinnerService { get; set; } = default!;
    [Inject]
    protected ITagService TagService { get; set; } = default!;

    [CascadingParameter]
    public IModalService Modal { get; set; } = default!;

    List<Tag>? AlarmsTagTable;

    string input = "";    


    protected override async Task OnInitializedAsync()
    {
        await GetTags();
    }

    public async Task AddTag()
    {
        var options = new ModalOptions();
        options.Class = "modal-2";
        var createModal = Modal.Show<AddTagModal>("Добавить Tag", options);
        var result = await createModal.Result;

        if (result.Confirmed)
        {
            SpinnerService.Show();
            await GetTags();
            SpinnerService.Hide();
        }
    }

    public async Task EditTag(Tag tag)
    {
        var options = new ModalOptions();
        options.Class = "modal-2";
        var parameters = new ModalParameters();
        parameters.Add("Tag", tag);

        var createModal = Modal.Show<EditTagModal>("Изменить Tag", parameters, options);
        var result = await createModal.Result;

        if (result.Confirmed)
        {
            SpinnerService.Show();
            await GetTags();
            SpinnerService.Hide();
        }
    }

    public async Task DeleteTag(Tag tag)
    {
        ArgumentNullException.ThrowIfNull(tag.Id);
        var parameters = new ModalParameters();
        parameters.Add("Name", tag.TagName);
        var options = new ModalOptions();
        options.Class = "modal-delete";
        var deleteModal = Modal.Show<DeleteTagModal>("Удаление Tag", parameters, options);
        var result = await deleteModal.Result;

        if (result.Confirmed)
        {
            SpinnerService.Show();
            await TagService.DeleteTag(tag);
            await GetTags();
            SpinnerService.Hide();
        }
    }

    private async Task Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await GetTags();
        }
    }

    private async Task GetTags()
    {
        SpinnerService.Show();
	    
	    var tags = await TagService.GetAllTags();
        var alarmsTagTable = new List<Tag>(tags);

        if (input != "")
        {
            AlarmsTagTable = new();
            foreach (var context in alarmsTagTable)
            {
                @if (context != null && context.TagName != null)
                {
                    if (context.TagName.ToUpper().IndexOf(input.ToUpper()) > -1)
                    {
                        AlarmsTagTable.Add(context);
                    }                    
                }
            }
        }
        else 
        {
            AlarmsTagTable = alarmsTagTable;
        }
        SpinnerService.Hide();
    }
}
