@using GPNA.AlarmControlSystem.Shared.ButtonsModal
@using GPNA.AlarmControlSystem.Services
@using GPNA.AlarmControlSystem.Interfaces
@using GPNA.AlarmControlSystem.Models.Dto.Tag
@using GPNA.AlarmControlSystem.Models.Enums
@using GPNA.AlarmControlSystem.Pages.TagTable.Components
@using GPNA.AlarmControlSystem.Extensions
@using GPNA.AlarmControlSystem.Pages.TagTable.Modals

<EditForm Model="@_command" OnValidSubmit="HandleValidSubmit">
	<DataAnnotationsValidator />
	<div class="modal-backdrop show"></div>
	<div class="tag-table__modal-bg correct">
		<CloseButton ClickEvent="Cancel"/>			
		<p class="tag-table__modal-title">Окно редактирования TAGA</p>
		<div class="w-100 h-100 p-0 d-flex flex-column gap-2 justify-content-between">
			<div class="d-flex justify-content-between">	
				<div class="tag-table__modal-info">
					<p class="tag-table__modal-title">Регламентная информация</p>
					<div class="w-100 h-100 p-0 d-flex flex-column gap-2 justify-content-between">
						<div class="d-flex justify-content-between">
							<div class="tag-table__modal-item-container">
								<p>TagName</p>
								<input class="tag-table__modal-item-input smaller" type="text" @bind="@_command.TagName">
							</div>
							<div class="tag-table__modal-item-container @(Tag.ModelState.TryGetValue("State", out var errorState) ? "red" : "")">
								<p>Состояние</p>
								<div class="tag-table__modal-custom-select">
									<select class="tag-table__modal-item-select" style="color:rgba(0, 32, 51, 0.25)" @bind="_command.State">
										<option disabled selected hidden>Выберите состояние</option>
										@foreach (StateType stateType in Enum.GetValues(typeof(StateType)))
										{
											<option value="@stateType">@stateType.GetDescription()</option>
										}
									</select>
								</div>
							</div>
						</div>
						<div class="d-flex justify-content-between">
							<div class="tag-table__modal-item-container @(Tag.ModelState.TryGetValue("Priority", out var errorPriority) ? "red" : "")">
								<p>Приоритет</p>
								<div class="tag-table__modal-custom-select">
									<select class="tag-table__modal-item-select" style="color:rgba(0, 32, 51, 0.25)" @bind="_command.Priority">
										<option disabled selected hidden>Выберите приоритет</option>
										@foreach (PriorityType priority in Enum.GetValues(typeof(PriorityType)))
										{
											<option value="@priority">@priority.GetDescription()</option>
										}
									</select>
								</div>
							</div>
							<div class="tag-table__modal-item-container @(Tag.ModelState.TryGetValue("AlarmLimit", out var errorAlarmLimit) ? "red" : "")">
								<p>Уставка</p>
								<input class="tag-table__modal-item-input small" type="text" placeholder="Введите уставку" @bind="@_command.AlarmLimit">
							</div>
						</div>
						<div class="tag-table__modal-item-container @(Tag.ModelState.TryGetValue("Description", out var errorDescription) ? "red" : "")">
							<p>Описание</p>
							<input class="tag-table__modal-item-input" type="text" placeholder="Введите описание" @bind="@_command.Description">
						</div>
					</div>
				</div>
				<div class="tag-table__modal-info">
					<p class="tag-table__modal-title">ИНФОРМАЦИЯ С ПОЛЯ</p>
					<div class="w-100 h-100 p-0 d-flex flex-column gap-2 justify-content-between">
						<div class="d-flex justify-content-between">
							<div class="tag-table__modal-item-container">
								<p>TagName</p>
								<input class="tag-table__modal-item-input smaller" 
								       value="@(Tag.LastBufferAlarm?.TagName ?? "")" 
								       readonly>
							</div>
							<div class="tag-table__modal-item-container">
								<p>Состояние</p>
								<input class="tag-table__modal-item-input smaller"
								       value="@(Tag.LastBufferAlarm?.State.GetDescription() ?? "")" 
								       readonly>
							</div>
						</div>
						<div class="d-flex justify-content-between">
							<div class="tag-table__modal-item-container">
								<p>Приоритет</p>
								<input class="tag-table__modal-item-input smaller" 
								       value="@(Tag.LastBufferAlarm?.Priority.GetDescription() ?? "")"
								       readonly>
							</div>
							<div class="tag-table__modal-item-container">
								<p>Уставка</p>
								<input class="tag-table__modal-item-input small" 
								       value="@(Tag.LastBufferAlarm?.AlarmLimit ?? "")"
								       readonly>
							</div>
						</div>
						<div class="tag-table__modal-item-container">
							<p>Описание</p>
							<input class="tag-table__modal-item-input" 
							       value="@Tag.LastBufferAlarm?.Description"
							       readonly>
						</div>
					</div>
				</div>
			</div>
			<div class="tag-table__modal-info big">
				<p class="tag-table__modal-title">РЕГЛАМЕНТ</p>
				<div class="d-flex justify-content-between gap-5">
					<div class="d-flex flex-column gap-2 justify-content-between">
						<div class="tag-table__modal-item-container @(Tag.ModelState.TryGetValue("Position", out var errorPosition) ? "red" : "")">
							<p>Позиция по ГП</p>
							<input class="tag-table__modal-item-input big" @bind="_command.Position">
						</div>
						<div class="tag-table__modal-item-container @(Tag.ModelState.TryGetValue("Consequence", out var errorConsequence) ? "red" : "")">
							<p>Потенциальные последствия</p>
							<textarea class="tag-table__modal-item-textarea big" type="text" @bind="_command.Consequence" placeholder="Введите потенциальные последствия"></textarea>
						</div>
						<div class="tag-table__modal-item-container @(Tag.ModelState.TryGetValue("Inform", out var errorInform) ? "red" : "")">
							<p>Условия усиления</p>
							<textarea class="tag-table__modal-item-textarea big" type="text" @bind="_command.Inform" placeholder="Введите условия усиления"></textarea>
						</div>
						<div class="tag-table__modal-item-container @(Tag.ModelState.TryGetValue("ReactionTime", out var errorReactionTime) ? "red" : "")">
							<p>Время на реакцию</p>
							<input class="tag-table__modal-item-input big" type="text" @bind="_command.ReactionTime" placeholder="Введите время на реакцию">
						</div>
					</div>
					<div class="d-flex flex-column gap-2 justify-content-start">
						<div class="tag-table__modal-item-container @(Tag.ModelState.TryGetValue("Unit", out var errorUnit) ? "red" : "")">
							<p>Единицы измерения</p>
							<input class="tag-table__modal-item-input big" @bind="_command.Unit">
						</div>
						<div class="tag-table__modal-item-container @(Tag.ModelState.TryGetValue("ActionFieldOperator", out var errorActionFieldOperator) ? "red" : "")">
							<p>Действия Полевого оператора</p>
							<textarea class="tag-table__modal-item-textarea big" type="text" @bind="_command.ActionFieldOperator" placeholder="Введите действия полевого оператора"></textarea>
						</div>
						<div class="tag-table__modal-item-container @(Tag.ModelState.TryGetValue("ActionArmOperator", out var errorActionArmOperator) ? "red" : "")">
							<p>Действия оператора АРМ</p>
							<textarea class="tag-table__modal-item-textarea big" type="text" @bind="_command.ActionArmOperator" placeholder="Введите действия оператора АРМ"></textarea>
						</div>
					</div>
				</div>
			</div>				
			<div class="tag-table__modal-button-container justify-content-between">
				<button type="submit" @onclick="Click" class="button-modal send-tag-journal">
					<svg>
						<use href="/img/icons/icons.svg#tag-modal-send-to-journal"></use>
					</svg>
					<p>Отправить в журнал изменений АСУ ТП</p>
				</button>
				<div class="tag-table__modal-button-container mt-0">
					<SaveButton />
					<CancelButton ClickEvent="Cancel" />
				</div>				

				<SaveTagModal @ref="saveTagModal" TagInfoChange="true"></SaveTagModal>
				<SendTagToJournalModal @ref="sendTagToJournalModal"></SendTagToJournalModal>
				<CancelChangeTagModal @ref="cancelChangeTagModal"></CancelChangeTagModal>
				
			</div>			
		</div>
	</div> 
	@if (!string.IsNullOrEmpty(_error)) {
		<div class="alert alert-danger mt-3 mb-0">@_error</div>
	}
</EditForm>

@code {
	[CascadingParameter] BlazoredModalInstance ModalInstance { get; set; } = default!;
	[CascadingParameter] public IModalService Modal { get; set; } = default!;

	[Inject] protected ISpinnerService SpinnerService { get; set; } = default!;
	[Inject] protected ITagService TagService { get; set; } = default!;

	[Parameter] public TagDto Tag { get; set; } = new TagDto();

	private UpdateTagCommand _command = new();
	private string _error  = "";

	protected override void OnInitialized()
	{
		_command = new UpdateTagCommand()
		{
			WorkStationId = Tag.WorkStationId,
			Id = Tag.Id,
			Position = Tag.Position,
			TagName = Tag.TagName,
			Description = Tag.Description,
			Unit = Tag.Unit,
			State = Tag.State,
			Priority = Tag.Priority,
			AlarmLimit = Tag.AlarmLimit,
			Scale = Tag.Scale,
			Consequence = Tag.Consequence,
			ActionFieldOperator = Tag.ActionFieldOperator,
			ActionArmOperator = Tag.ActionArmOperator,
			Inform = Tag.Inform,
			ReactionTime = Tag.ReactionTime,
			Validate = Tag.Validate
		};
	}

	private async void HandleValidSubmit() 
	{
		SpinnerService.Show();
		var updatedTag = Tag.Id == default ? await TagService.Create(_command) : await TagService.Update(_command);
		SpinnerService.Hide(); 
		if (updatedTag.Success)
		{
			await ModalInstance.CloseAsync(ModalResult.Ok(updatedTag.Payload));
		}
	}

	void Cancel()
	{
		ModalInstance.CancelAsync();
	}

	////SaveTagModal saveTagModal;

	SaveTagModal? saveTagModal;
	SendTagToJournalModal? sendTagToJournalModal;
	CancelChangeTagModal? cancelChangeTagModal;

	//void OnCancel()
	//{
	//	saveTagModal.Hide();
	//}

	////void OnSave()
	////{
	////	saveTagModal.Show();
	////}

	//private async Task OnSave()
	//{
	//	//var parameters = new ModalParameters { { "Tag", Tag } };

	//	var updateModal = Modal.Show<SaveTagModal>(""/*, parameters*/);
	//	var result = await updateModal.Result;

	//	//if (result.Confirmed && result.Data != null)
	//	//{
	//	//	Tag = (TagDto)result.Data;
	//	//}
	//}

	[Parameter] public EventCallback<bool> ClickEvent { get; set; }

	private async Task Click()
	{
		await ClickEvent.InvokeAsync(true);
	}

}
