@using GPNA.AlarmControlSystem.Shared.ButtonsModal
@using GPNA.AlarmControlSystem.Models.Dto.Tag
@using GPNA.AlarmControlSystem.Services
@using GPNA.AlarmControlSystem.Interfaces


	<div class="modal-backdrop show"></div>

	<div class="modal tag-table__modal-bg">
		<CloseButton ClickEvent="Cancel"/>	
		<p class="title">ОКНО ВВОДА НОВОГО TЕГА</p>
		<div class="w-100 h-100 p-0 d-flex flex-column gap-2 justify-content-between">
			<div class="d-flex justify-content-between">
				<div class="tag-table__modal-item-container">
					<p>Позиция по ГП</p>
					<input class="tag-table__modal-item-input small" type="text" placeholder="Введите позицию по ГП">
				</div>
				<div class="tag-table__modal-item-container">
					<p>TagName</p>
					<input class="tag-table__modal-item-input small" type="text" placeholder="Введите TagName">
				</div>
			</div>
			<div class="d-flex justify-content-between">
				<div class="tag-table__modal-item-container">
					<p>Состояние</p>
					<div class="small tag-table__modal-custom-select">
					<select class="tag-table__modal-item-select" onchange="this.style.color='#002033'">
						<option disabled selected hidden>Выберите состояние</option>
						<option >Состояние 1</option>
						<option >Состояние 2</option>
					</select>
					</div>						
				</div>
				<div class="tag-table__modal-item-container">
					<p>Приоритет</p>
					<div class="small tag-table__modal-custom-select">
						<select class="tag-table__modal-item-select" onchange="this.style.color='#002033'">
							<option disabled selected hidden>Выберите приоритет</option>
							<option>Приоритет 1</option>
							<option>Приоритет 2</option>
							<option>Приоритет 3</option>
						</select>
					</div>						
				</div>
			</div>
			<div class="tag-table__modal-item-container">
				<p>Описание</p>
				<input class="tag-table__modal-item-input" type="text" placeholder="Введите описание">
			</div>
			<div class="d-flex justify-content-between">
				<div class="tag-table__modal-item-container">
					<p>Уставка</p>
					<input class="tag-table__modal-item-input small" type="text" placeholder="Введите уставку">
				</div>
				<div class="tag-table__modal-item-container">
					<p>Единицы измерения</p>
					<input class="tag-table__modal-item-input small" type="text" placeholder="Введите ед. измерения">
				</div>
			</div>
			<div class="tag-table__modal-item-container">
				<p>Потенциальные последствия</p>
				<textarea class="tag-table__modal-item-textarea" type="text" placeholder="Введите потенциальные последствия"></textarea>
			</div>
			<div class="tag-table__modal-item-container">
				<p>Действия полевого оператора</p>
				<textarea class="tag-table__modal-item-textarea" type="text" placeholder="Введите действия полевого оператора"></textarea>
			</div>
			<div class="tag-table__modal-item-container">
				<p>Действия оператора АРМ</p>
				<textarea class="tag-table__modal-item-textarea" type="text" placeholder="Введите действия оператора АРМ"></textarea>
			</div>
			<div class="tag-table__modal-item-container">
				<p>Условия усиления</p>
			<textarea class="tag-table__modal-item-textarea" type="text" placeholder="Введите условия усиления"></textarea>					
			</div>
			<div class="tag-table__modal-item-container">
				<p>Время на реакцию</p>
				<input class="tag-table__modal-item-input" type="text" placeholder="Введите время на реакцию">
			</div>
			<div class="tag-table__modal-button-container">
				<SaveButton/>
				<CancelButton ClickEvent="Cancel"/>					
			</div>			
		</div>
	</div>



@code {
	[CascadingParameter] BlazoredModalInstance ModalInstance { get; set; } = default!;  
	[Inject]
	protected ITagService TagService { get; set; } = default!; 
	[Inject]
	protected ISpinnerService SpinnerService { get; set; } = default!;
	
	private CreateTagCommand Tag { get; set; }

	public async void HandleValidSubmit() 
	{
		SpinnerService.Show();
		
		await TagService.Create(Tag);  
		SpinnerService.Hide();       
		StateHasChanged();        

		await ModalInstance.CloseAsync(ModalResult.Ok());
	}

	void Cancel()
	{
		ModalInstance.CancelAsync();
	}
}
