@using GPNA.AlarmControlSystem.Services
@using LocalDbStorage.Interfaces
@using LocalDbStorage.Repositories.Models
@using LocalDbStorage.Repositories.Models.Enum

<div class="simple-form">

    <EditForm Model="@Tag" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <div style="display: flex; width: 100%; gap: 16px;">
            <div class="form-group">
            <label>Позиция по ГП:</label>
            <InputText @bind-Value="Tag.Position" class="form-control" />
            <ValidationMessage For="@(() => Tag.Position)" />
            </div>
            <div class="form-group">
                <label>TagName:</label>
                <InputText @bind-Value="Tag.TagName" class="form-control" />
                <ValidationMessage For="@(() => Tag.TagName)" />
            </div>
        </div>
         <div style="display: flex; width: 100%; gap: 16px;">
            <div class="form-group">
                <label>Состояние:</label>
                <InputSelect @bind-Value="Tag.State" class="form-control">
                    <option value=""></option>
                    @foreach (var state in Enum.GetValues(typeof(StateType)))
                    {
                        <option value="@state">@state</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => Tag.State)" />
            </div>
            <div class="form-group">
                <label>Приоритет:</label>
                <InputSelect @bind-Value="Tag.Priority" class="form-control">
                    <option value=""></option>
                    @foreach (var priority in Enum.GetValues(typeof(PriorityType)))
                    {
                        <option value="@priority">@priority</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => Tag.State)" />
            </div>
        </div>
        
        <div class="form-group">
            <label>Описание:</label>
            <InputText @bind-Value="Tag.Description" class="form-control" />
            <ValidationMessage For="@(() => Tag.Description)" />
        </div>
        <div style="display: flex; width: 100%; gap: 16px;">
            <div class="form-group">
                <label>Уставка:</label>
                <InputText @bind-Value="Tag.AlarmLimit" class="form-control" />
                <ValidationMessage For="@(() => Tag.AlarmLimit)" />
            </div>
            <div class="form-group">
                <label>Ед. изм.</label>
                <InputText @bind-Value="Tag.Unit" class="form-control" />
                <ValidationMessage For="@(() => Tag.Unit)" />
            </div>
        </div>
        <div class="form-group">
            <label>Потенциальные последствия:</label>
            <InputTextArea @bind-Value="Tag.Consequence" class="form-control" />
            <ValidationMessage For="@(() => Tag.Consequence)" />
        </div>
        <div class="form-group">
            <label>Действия Полевого оператора:</label>
            <InputTextArea @bind-Value="Tag.ActionFieldOperator" class="form-control" />
            <ValidationMessage For="@(() => Tag.ActionFieldOperator)" />
        </div>
        <div class="form-group">
            <label>Действия Оператора АРМ:</label>
            <InputTextArea @bind-Value="Tag.ActionArmOperator" class="form-control" />
            <ValidationMessage For="@(() => Tag.ActionArmOperator)" />
        </div>
        <div class="form-group">
            <label>Уровень усиления:</label>
            <InputTextArea @bind-Value="Tag.Inform" class="form-control" />
            <ValidationMessage For="@(() => Tag.Inform)" />
        </div>
        <div class="form-group">
            <label>Время на реакцию:</label>
            <InputTextArea @bind-Value="Tag.ReactionTime" class="form-control" />
            <ValidationMessage For="@(() => Tag.ReactionTime)" />
        </div>
        <div class="modal-button-group">
            <button class="button button-primary" @onclick="Cancel">
                <span class="fa fa-times"></span>
                Отменить
            </button>
            <button class="button button-success">
                @if (IsLoading) {
                    <span class="spinner-border spinner-border-sm mr-1"></span>
                }
                else
                {
                    <span class="fa fa-check" aria-hidden="true"></span>
                }
                Сохранить
            </button>
        </div>
        @if (!string.IsNullOrEmpty(Error)) {
            <div class="alert alert-danger mt-3 mb-0">@Error</div>
        }
    </EditForm>
    
</div>

@code {
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; } = default!;    
    [Inject]
    protected ITagService TagService { get; set; } = default!; 
    [Inject]
    protected ISpinnerService SpinnerService { get; set; } = default!;

    private Tag Tag { get; set; } = new Tag();

    private bool IsLoading { get; set; } = false;
    private string Error { get; set; } = "";

    public async void HandleValidSubmit() 
    {
        SpinnerService.Show();
        await TagService.AddTag(Tag);  
        SpinnerService.Hide();        
        IsLoading = false;
        StateHasChanged();        

        await ModalInstance.CloseAsync(ModalResult.Ok());
    }

    void Cancel()
    {
        ModalInstance.CancelAsync();
    }

}