@using GPNA.AlarmControlSystem.Shared.ButtonsModal
@using GPNA.AlarmControlSystem.Services
@using GPNA.AlarmControlSystem.Interfaces
@using GPNA.AlarmControlSystem.Models.Dto.Tag
@using GPNA.AlarmControlSystem.Models.Enums
@using GPNA.AlarmControlSystem.Extensions

<EditForm Model="@_command" OnValidSubmit="HandleValidSubmit">
	<DataAnnotationsValidator />
	<div class="modal-backdrop show"></div>
	<div class="modal tag-table__modal-bg edit">
		<CloseButton ClickEvent="Cancel"/>
		<p class="tag-table__modal-title">ОКНО РЕДАКТИРОВАНИЯ TЕГА</p>
		<div class="w-100 h-100 p-0 d-flex flex-column gap-2 justify-content-between">
			<div class="d-flex justify-content-between">
				<div class="tag-table__modal-item-container">
					<p>Позиция по ГП</p>
					<input class="tag-table__modal-item-input small" type="text" placeholder="Введите позицию по ГП" @bind="@_command.Position">
				</div>
				<div class="tag-table__modal-item-container">
					<p>TagName</p>
					<input class="tag-table__modal-item-input small" type="text" @bind="@_command.TagName" readonly="@(Tag.Id != default)">
				</div>
			</div>
			<div class="d-flex justify-content-between">
				<div class="tag-table__modal-item-container">
					<p>Состояние</p>
					<div class="tag-table__modal-custom-select">
						<input class="tag-table__modal-item-input smaller" type="text" value="@Tag.State" disabledQ/>
					</div>
				</div>
				<div class="tag-table__modal-item-container">
					<p>Приоритет</p>
					<div class="tag-table__modal-custom-select">
						<select class="tag-table__modal-item-select" style="color:rgba(0, 32, 51, 0.25)" @bind="_command.Priority">
							<option disabled selected hidden>Выберите приоритет</option>
							@foreach (PriorityType priority in Enum.GetValues(typeof(PriorityType)))
							{
								<option value="@priority">@priority.GetDescription()</option>
							}
						</select>
					</div>
				</div>
			</div>
			<div class="tag-table__modal-item-container">
				<p>Описание</p>
				<input class="tag-table__modal-item-input" type="text" placeholder="Введите описание" @bind="@_command.Description">
			</div>
			<div class="d-flex justify-content-between">
				<div class="tag-table__modal-item-container">
					<p>Уставка</p>
					<input class="tag-table__modal-item-input small" type="text" placeholder="Введите уставку" @bind="@_command.AlarmLimit">
				</div>
				<div class="tag-table__modal-item-container">
					<p>Единицы измерения</p>
					<input class="tag-table__modal-item-input small" type="text" placeholder="Введите ед. измерения" @bind="@_command.Unit">
				</div>
			</div>
			<div class="tag-table__modal-item-container">
				<p>Потенциальные последствия</p>
				<textarea class="tag-table__modal-item-textarea" type="text" placeholder="Введите потенциальные последствия" @bind="@_command.Consequence"></textarea>
			</div>
			<div class="tag-table__modal-item-container">
				<p>Действия полевого оператора</p>
				<textarea class="tag-table__modal-item-textarea" type="text" placeholder="Введите действия полевого оператора" @bind="@_command.ActionFieldOperator"></textarea>
			</div>
			<div class="tag-table__modal-item-container">
				<p>Действия оператора АРМ</p>
				<textarea class="tag-table__modal-item-textarea" type="text" placeholder="Введите действия оператора АРМ" @bind="@_command.ActionArmOperator"></textarea>
			</div>
			<div class="tag-table__modal-item-container">
				<p>Условия усиления</p>
				<textarea class="tag-table__modal-item-textarea" type="text" placeholder="Введите условия усиления" @bind="@_command.Inform"></textarea>
			</div>
			<div class="tag-table__modal-item-container">
				<p>Время на реакцию</p>
				<input class="tag-table__modal-item-input" type="text" placeholder="Введите время на реакцию" @bind="@_command.ReactionTime">
			</div>
			<div class="tag-table__modal-button-container">
				<SaveButton />
				@* <CancelButton ClickEvent="async () => await Cancel()"/> *@
				<div @onclick="Cancel" class="button-modal cancel" type="button" title="cancel">
                	<svg>
                		<use href="/img/icons/icons.svg#tag-modal-cancel"></use>
                	</svg>
                	<p>Отменить</p>
                </div>
			</div>
		</div>
	</div>
	@if (!string.IsNullOrEmpty(_error)) {
		<div class="alert alert-danger mt-3 mb-0">@_error</div>
	}
</EditForm>


@code {
	[CascadingParameter] BlazoredModalInstance ModalInstance { get; set; } = default!;
	[CascadingParameter] public IModalService Modal { get; set; } = default!;
	
	[Inject] protected ISpinnerService SpinnerService { get; set; } = default!;
	[Inject] protected ITagService TagService { get; set; } = default!;

	[Parameter] public TagDto Tag { get; set; } = new TagDto();
	
	private UpdateTagCommand _command = new();
	private string _error  = "";

	protected override void OnInitialized()
	{
		_command = new UpdateTagCommand()
		{
			WorkStationId = Tag.WorkStationId,
			Id = Tag.Id,
			Position = Tag.Position,
			TagName = Tag.TagName,
			Description = Tag.Description,
			Unit = Tag.Unit,
			Priority = Tag.Priority,
			AlarmLimit = Tag.AlarmLimit,
			Scale = Tag.Scale,
			Consequence = Tag.Consequence,
			ActionFieldOperator = Tag.ActionFieldOperator,
			ActionArmOperator = Tag.ActionArmOperator,
			Inform = Tag.Inform,
			ReactionTime = Tag.ReactionTime,
			Validate = Tag.Validate
		};
	}

	private async void HandleValidSubmit() 
	{
		SpinnerService.Show();
		var updatedTag = Tag.Id == default ? await TagService.Create(_command) : await TagService.Update(_command);
		SpinnerService.Hide(); 
		if (updatedTag.Success)
		{
			await ModalInstance.CloseAsync(ModalResult.Ok(updatedTag.Payload));
		}
	}

	private async Task Cancel()
	{
		var deleteModal = Modal.Show<CancelChangeTagModal>("");
		var result = await deleteModal.Result;

		if (result.Confirmed)
		{
			await ModalInstance.CancelAsync();
			// SpinnerService.Show();
			// await TagService.Delete(Tag.Id);
			// SpinnerService.Hide();
			// await OnTagDeleted.InvokeAsync(Tag);
		}
	}
}
