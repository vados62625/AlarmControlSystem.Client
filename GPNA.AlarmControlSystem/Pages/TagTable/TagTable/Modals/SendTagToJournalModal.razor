@using GPNA.AlarmControlSystem.Shared.ButtonsModal
@using GPNA.AlarmControlSystem.Models.Dto.Tag
@using GPNA.AlarmControlSystem.Interfaces
@using GPNA.AlarmControlSystem.Models.Dto
@using GPNA.AlarmControlSystem.Models.Dto.TagChange
@using GPNA.AlarmControlSystem.Models.Dto.User
@using GPNA.AlarmControlSystem.Services

<div class="modal-backdrop show"></div>

<div class="tag-table__modal-bg send-tag-journal">
	<div class="d-flex align-items-center gap-3">
		<svg style="width: 15px; height: 14px; margin-bottom: 3px;">
			<use href="/img/icons/icons.svg#tag-modal-attention"></use>
		</svg>
		<p class="tag-table__modal-title">ОТПРАВИТЬ ЗАДАЧУ В ЖУРНАЛ ИЗМЕНЕНИЙ АСУ ТП?</p>
	</div>

	<div class="w-100 h-100 p-0 d-flex flex-column gap-2 justify-content-between">
		<p class="modal-delete-text mt-2">Выдать задание на изменение конфигурации АСУ ТП<br /> (Отправить в журнал изменений АСУ ТП)?</p>

		<div class="tag-table__modal-item-container">
			<p>Специалист АСУ ТП</p>
			<div class="small tag-table__modal-custom-select">
				<select @bind="_command.ExecutorUserId"
				        class="tag-table__modal-item-select">
					<option selected>Выберите специалиста АСУ ТП</option>
					@foreach (var user in _users)
					{
						<option value="@user.Id">@user.Login</option>
					}
				</select>
			</div>
		</div>
		<div class="tag-table__modal-item-container">
			<p>Комментарий</p>
			<textarea class="tag-table__modal-item-textarea" type="text" placeholder="Введите комментарий" @bind="@_command.Comment"></textarea>
		</div>
		
		<div class="tag-table__modal-button-container">
			<SendButton ClickEvent="SendToJournal"/>
			<NotSendButton ClickEvent="Cancel" />
		</div>
	</div>
</div>

@code {
	[Inject] protected ITagChangesService TagChangesService { get; set; } = default!;
	[Inject] protected IUserService UserService { get; set; } = default!;
	[Inject] protected ISpinnerService SpinnerService { get; set; } = default!;
	
	[CascadingParameter] BlazoredModalInstance ModalInstance { get; set; } = default!;	
	
	[Parameter] public TagDto? Tag { get; set; } = new();

	private AddTagChangeCommand _command = new();
	private List<UserDto> _users = new();

	protected override void OnInitialized()
	{
		SpinnerService.Load(GetUsers);

		_command.InitiatorUserId = 1;
		
		//TODO Заполнить, когда появятся юсеры.
		//_command.InitiatorUserId = Инициатор Задачи
		//_command.ExecutorUserId = Исполнитель
	}

	private async Task GetUsers()
	{
		var result = await UserService.GetList();
		if (result.Success)
			_users = result.Payload.ToList();
		StateHasChanged();
	}

	private async Task SendToJournal()
	{
		_command.TagId = Tag.Id;
		
		var result = await TagChangesService.CreateTagChange(_command);
		if (result.Success)
			await ModalInstance.CloseAsync(ModalResult.Ok());
	}

	void Cancel()
	{
		ModalInstance.CancelAsync();
	}
}

