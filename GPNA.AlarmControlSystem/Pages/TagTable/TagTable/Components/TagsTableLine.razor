@using GPNA.AlarmControlSystem.Models.Dto.ActiveAlarm
@using GPNA.AlarmControlSystem.Pages.Monitoring.Components
@using GPNA.AlarmControlSystem.Models.Dto.Tag
@using GPNA.AlarmControlSystem.Extensions
@using GPNA.AlarmControlSystem.Interfaces
@using GPNA.AlarmControlSystem.Pages.TagTable.TagTable.Components
@using GPNA.AlarmControlSystem.Pages.TagTable.Components
@using GPNA.AlarmControlSystem.Pages.TagTable.TagTable.Modals
@using GPNA.AlarmControlSystem.Services
@using Blazored.Toast.Services

<tr class="tag-table-line @Tag.Validate.ToString()">
    <td @onclick="ShowMoreAttributes">                
        <div class="tag-table-indicator @Tag.Validate.ToString()"></div>                               
    </td>           
    <td @onclick="ShowMoreAttributes">
        @Tag.TagName
    </td>
    <td @onclick="ShowMoreAttributes">
        <MonitoringTableStatus Title="@Tag.State.GetDescription()" Status="@Tag.State"/>
    </td>
    <td @onclick="ShowMoreAttributes">
        <div class=" d-flex gap-2 align-items-center">
            @if (Tag.ModelState.TryGetValue("Description", out var errorDesc)) 
            {                    
                <svg class="tag-table-icon-attention">
                    <use href="/img/icons/icons.svg#tag-table-attention"></use>
                </svg>                        
            }
            <p>@Tag.Description</p>
        </div>                                
    </td>
    <td @onclick="ShowMoreAttributes">
        @if (Tag.ModelState.TryGetValue("Priority", out var errorPriority))
        {
            <div class="position-relative">
                <div class="tag-table-container-attention priority">
                    <svg class="tag-table-icon-attention">
                        <use href="/img/icons/icons.svg#tag-table-attention"></use>
                    </svg>
                </div>
            </div>
        }
        <MonitoringTableStatus Title="@Tag.Priority.GetDescription()" Priority="@Tag.Priority"/>
    </td>
    <td @onclick="ShowMoreAttributes">
        @if (Tag.ModelState.TryGetValue("AlarmLimit", out var errorAlarmLimit)) {
            <div class="position-relative">
            <div class="tag-table-container-attention">
                <svg class="tag-table-icon-attention">
                    <use href="/img/icons/icons.svg#tag-table-attention"></use>
                </svg>
            </div>
        </div>
        }                
        <p>@(Tag.AlarmLimit ?? "N/A")</p>                
    </td>
    <td @onclick="ShowMoreAttributes">
        <svg class="tag-table-icon-reglament @(_attentionReglament ? "red" : "")">
            <use href="/img/icons/icons.svg#tag-table-reglament"></use>
        </svg>
    </td>
    <td>
        <div class="d-flex gap-1 justify-content-center align-items-center">
            <button class="tag-table-button-modal" @onclick="EditTag">
                <svg>
                    <use href="/img/icons/icons.svg#tag-table-edit"></use>
                </svg>
            </button>
            @* <button class="tag-table-button-modal"> *@
            @*     <svg> *@
            @*         <use href="/img/icons/icons.svg#tag-table-correct"></use> *@
            @*     </svg> *@
            @* </button> *@
            <button class="tag-table-button-modal" @onclick="DeleteTag">
                <svg>
                    <use href="/img/icons/icons.svg#tag-table-delete"></use>
                </svg>
            </button>
        </div>
    </td>
    <td>
        <input checked="@_isChecked" @oninput="CheckboxChanged" type="checkbox" disabled="@_isDisable"/>
    </td>
</tr>
@if (_displayComment)
{
    <tr class="tag-table-comment-title">
        <td colspan="9"><p>РЕГЛАМЕНТ</p></td>
    </tr>
    <TagTableInfo Title="Позиция по ГП" Description="@Tag.Position"/>
    <TagTableInfo Title="Потенциальные последствия" Description="@Tag.Consequence"/>
    <TagTableInfo Title="Действия Полевого оператора" Description="@Tag.ActionFieldOperator"></TagTableInfo>
    <TagTableInfo Title="Действия Оператора APM" Description="@Tag.ActionArmOperator"></TagTableInfo>
    <TagTableInfo Title="Условия усиления" Description="@Tag.Inform"></TagTableInfo>
    <TagTableInfo Title="Время на реакцию" Description="@Tag.ReactionTime"></TagTableInfo>
    <tr class="tag-table-comment-bottom-line"></tr>
}

@code {
    [CascadingParameter] public IModalService Modal { get; set; } = default!;
    
    [Inject] protected ISpinnerService SpinnerService { get; set; } = default!;
    [Inject] protected IToastService? ToastService { get; set; }
    [Inject] protected ITagService TagService { get; set; } = default!;

    [Parameter] public ActiveAlarmDto? Alarm { get; set; }
    
    [Parameter] public TagDto Tag { get; set; } = new TagDto();
    [Parameter] public EventCallback<TagDto> OnTagDeleted { get; set; }
    [Parameter] public EventCallback<TagDto> AddTagToTagChangeListCallback { get; set; }
    [Parameter] public EventCallback<TagDto> DeleteTagInTagChangeListCallback { get; set; }
    
    [Parameter]
    public bool IsChecked { get; set; } = true;
    private bool _isChecked;
    private bool _isDisable;
    
    private bool _attentionReglament = false;

    bool _displayComment = false;


    protected override void OnInitialized()
    {
        _isChecked = Tag.HasActiveJournalRecord;
        _isDisable = Tag.HasActiveJournalRecord;
    }

    protected override void OnParametersSet()
    {
        if (Tag.ModelState.Count > 0)
        {
            foreach (var obj in Tag.ModelState)
            {
                if (obj.Key is "Position" or "Consequence" or "ActionFieldOperator" or "ActionArmOperator" or "Inform" or "ReactionTime")
                {
                    _attentionReglament = true;
                }
            }
        }
    }

    private async Task EditTag()
    {
        var parameters = new ModalParameters { { "Tag", Tag } };

        var updateModal = Modal.Show<CorrectTagModal>("", parameters);
        var result = await updateModal.Result;

        if (result.Confirmed && result.Data!=null)
        {
            Tag = (TagDto)result.Data;
        }
    }
    
    private async Task DeleteTag()
    {
        ArgumentNullException.ThrowIfNull(Tag.Id);
        var parameters = new ModalParameters { { "TagName", Tag.TagName } };
        var deleteModal = Modal.Show<DeleteTagModal>("", parameters);
        var result = await deleteModal.Result;

        if (result.Confirmed)
        {
            SpinnerService.Show();
            var deleteResult = await TagService.Delete(Tag.Id);
            if (!deleteResult.Success)
                ToastService?.ShowError(deleteResult.Error);
            SpinnerService.Hide();
            await OnTagDeleted.InvokeAsync(Tag);
        }
    }

    void ShowMoreAttributes()
    {
        _displayComment = !_displayComment;
    }
    
    private async void CheckboxChanged(ChangeEventArgs e)
    {
        if (e.Value!=null & (bool)e.Value!)
        {
            await AddTagToTagChangeListCallback.InvokeAsync(Tag);
        } 
        else
        {
            await DeleteTagInTagChangeListCallback.InvokeAsync(Tag);
        }
    }

}
