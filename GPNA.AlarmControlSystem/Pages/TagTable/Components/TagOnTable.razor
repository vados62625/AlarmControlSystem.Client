@using GPNA.AlarmControlSystem.Pages.TagTable.Modals
@using GPNA.AlarmControlSystem.Shared.Icons
@using LocalDbStorage.Repositories.Models
@using LocalDbStorage.Services


    <tr class="item-table" @onclick="ShowMoreattributes" style="cursor:pointer;">
        <td colspan=2>@Tag.Position</td>

        @if(Tag.AlarmLimit != null && Tag.State != LocalDbStorage.Repositories.Models.Enum.StateType.none)
        {
            <td colspan=2>@(Tag.TagName + "_" + Tag.State)</td>
        }
        else
        {
            <td colspan=2>@Tag.TagName</td>
        }
    
        <td colspan=6>@Tag.Description</td>
        <td>@Tag.Priority</td>
        <td>@Tag.AlarmLimit</td>
        <td style="padding: 0; padding-top: 8px;">
            <div style="display:flex; gap:8px; justify-content:center">
                <IconEditButton Tooltip="Изменить" ClickEvent="ClickEditTag" />
                <IconDeleteButton Tooltip="Удалить" ClickEvent="ClickDeleteTag" />                                    
            </div>                                
        </td>
    </tr>
                        
    @if (displayMore)
    {
    <tr>
        <td colspan="13" class="p-4 m-4">           
                <p><b>Потенциальные последствия: </b> @Tag.Consequence</p>
                <p><b>Действия Полевого оператора: </b>@Tag.ActionFieldOperator</p>
                <p><b>Действия Оператора АРМ: </b>@Tag.ActionArmOperator</p>
                <p><b>Уровень усиления: </b>@Tag.Inform</p>
                <p><b>Время на реакцию: </b>@Tag.ReactionTime</p>
        </td>                        
    </tr>
    }
@code
{
    [Parameter]
    public EventCallback<Tag> EditTag { get; set; }
    [Parameter]
    public EventCallback<Tag> DeleteTag { get; set; }

    [Parameter] public Tag Tag { get; set; }

    bool displayMore = false;

    void ShowMoreattributes()
    {
        displayMore = !displayMore;
    }

    private async Task ClickEditTag()
    {
        await EditTag.InvokeAsync(Tag);
    }
    private async Task ClickDeleteTag()
    {
        await DeleteTag.InvokeAsync(Tag);
    }


}