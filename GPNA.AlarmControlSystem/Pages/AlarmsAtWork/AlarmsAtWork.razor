@page "/alarms-at-work"
@using GPNA.AlarmControlSystem.Pages.AlarmsAtWork.Alarms
@using GPNA.AlarmControlSystem.Pages.Monitoring.Components
@using GPNA.AlarmControlSystem.Pages.AlarmsAtWork.Components
@using GPNA.AlarmControlSystem.Shared.Pagination
@using GPNA.AlarmControlSystem.Interfaces
@using GPNA.AlarmControlSystem.Models.Dto.BufferAlarms
@using GPNA.AlarmControlSystem.Models.Dto.Field
@using GPNA.AlarmControlSystem.Models.Dto.IncomingAlarm
@using GPNA.AlarmControlSystem.Models.Dto.Workstation
@using GPNA.AlarmControlSystem.Models.Enums
@using GPNA.AlarmControlSystem.Services
@using GPNA.AlarmControlSystem.Options
@using Microsoft.Extensions.Options
@inject IJSRuntime JS

<CascadingValue Name="@nameof(From)" Value="@From">
    <CascadingValue Name="@nameof(To)" Value="@To">
        <CascadingValue Name="@nameof(StateFilter)" Value="@StateFilter">
            <CascadingValue Name="@nameof(PriorityFilter)" Value="@PriorityFilter">

                <div class="page-main">
                    <div class="page-header">
                        <div class="d-flex date-period-select">
                            <div>
                                <input type="datetime-local" @bind="From" @bind:event="oninput">
                                <svg>
                                    <use href="/img/icons/icons.svg#calendar"></use>
                                </svg>
                            </div>
                            <div>
                                <input type="datetime-local" @bind="To" @bind:event="oninput">
                                <svg>
                                    <use href="/img/icons/icons.svg#calendar"></use>
                                </svg>
                            </div>
                            <button class="btn p-0 ms-2 d-flex shadow-none@(_spinnerClass)" id="button-refresh" @onclick="async () => await RefreshBySpinner()">
                                <svg class="w-100 h-100">
                                    <use href="/img/icons/icons.svg#refresh"></use>
                                </svg>
                            </button>
                            <div class="d-flex tagname-filter position-relative ms-2">
                                <input placeholder="Поиск по Tag" type="text" name="tagname" @bind="TagNameFilter" @bind:event="oninput" @onchange="async () => await InitializePageAsync()">
                            </div>
                        </div>
                        <div class="d-flex">
                            <p>ЗАДАЧИ МЕРЕТОЯХА @(Options?.Value.BranchName ?? "N/A") М/Р <b>@FieldName</b></p>
                            <SelectObject Object="dto" LinksDictionary="FieldLinksDictionary" />
                            <p style="margin-left:15px;">
                                <b>@WorkstationName</b>
                            </p>
                            <SelectObject LinksDictionary="WorkstationLinksDictionary" />
                        </div>
                        <div class="d-flex gap-2">
                            @if (FiltersOn)
                            {
                                <TitleBarButton Title="Фильтрация" FunctionButton="filtration" Action="DropFilters" />
                            }
                            <TitleBarButton Title="Экспорт" FunctionButton="export" Action="DownloadFileFromStream" />
                        </div>

                    </div>
                    <div class="d-flex justify-content-between overflow-auto">
                        <div class="priority-alarm-container">
                            <PriorityAlarm Title="Всего" Value="AlarmsCollection?.TotalCount" Priority="total" />
                            <PriorityAlarm Title="Критичный" Value="AlarmsCollection?.CountByPriority?[PriorityType.Urgent]" Priority="critical" />
                            <PriorityAlarm Title="Высокий" Value="AlarmsCollection?.CountByPriority?[PriorityType.High]" Priority="high" />
                            <PriorityAlarm Title="Низкий" Value="AlarmsCollection?.CountByPriority?[PriorityType.Low]" Priority="low" />
                            <PriorityAlarm Title="Инфо" Value="AlarmsCollection?.CountByPriority?[PriorityType.Information]" Priority="info" />
                            <PriorityAlarm Title="Без приоритета" Value="AlarmsCollection?.CountByPriority?[PriorityType.None]" Priority="none-priority" />
                        </div>
                        <div class="priority-alarm-container">
                            <PriorityAlarm Title="HH" Value="AlarmsCollection?.CountByState?[StateType.HH]" Status="hh" />
                            <PriorityAlarm Title="H" Value="AlarmsCollection?.CountByState?[StateType.H]" Status="h" />
                            <PriorityAlarm Title="LL" Value="AlarmsCollection?.CountByState?[StateType.LL]" Status="ll" />
                            <PriorityAlarm Title="L" Value="AlarmsCollection?.CountByState?[StateType.L]" Status="l" />
                            <PriorityAlarm Title="DISCR" Value="AlarmsCollection?.CountByState?[StateType.Discr]" Status="discr" />
                            <PriorityAlarm Title="RSHI" Value="AlarmsCollection?.CountByState?[StateType.RSHI]" Status="rshi" />
                            <PriorityAlarm Title="RSLO" Value="AlarmsCollection?.CountByState?[StateType.RSLO]" Status="rslo" />
                            <PriorityAlarm Title="NoneState" Value="AlarmsCollection?.CountByState?[StateType.none]" Status="none-state" />
                            <PriorityAlarm Title="Пожар" StatusActive="@(AlarmsCollection?.Fire ?? false ? "active" : "")" Status="fire" />
                            <PriorityAlarm Title="Загазованность" StatusActive="@(AlarmsCollection?.Gas ?? false ? "active" : "")" Status="gas" />
                        </div>
                    </div>
                    <div style="border-radius: 6px;">
                        <TasksTable></TasksTable>
                        @*<Pagination CurrentPage="CurrentPage" PagesCount="PagesCount" OnPageClick="OnPageChanged"></Pagination>*@
                    </div>
                </div>

            </CascadingValue>
        </CascadingValue>
    </CascadingValue>
</CascadingValue>

@code {

    [Inject]
    private IOptions<AcsModuleOptions>? Options { get; set; }

    [Inject]
    private IIncomingAlarmService? IncomingAlarmService { get; set; }

    [Inject]
    private IFieldService? FieldService { get; set; }

    [Inject]
    private IWorkStationService? WorkStationService { get; set; }

    [Inject]
    private IExportService? ExportService { get; set; }

    [Inject]
    private ISpinnerService? SpinnerService { get; set; }

    [Parameter]
    public DateTime DateTime { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public int? WorkstationId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public int? FieldId { get; set; }

    [Parameter]
    public string? WorkstationName { get; set; }

    [Parameter]
    public string? FieldName { get; set; }

    [CascadingParameter(Name = nameof(From))]
    public DateTimeOffset From { get; set; }

    [CascadingParameter(Name = nameof(To))]
    public DateTimeOffset To { get; set; }

    [CascadingParameter(Name = nameof(PagesCount))]
    public int PagesCount { get; set; }

    [CascadingParameter(Name = nameof(CurrentPage))]
    public int CurrentPage { get; set; } = 1;

    [Parameter]
    public string TagNameFilter { get; set; } = string.Empty;

    [CascadingParameter(Name = nameof(StateFilter))]
    public StateType? StateFilter { get; set; }

    [CascadingParameter(Name = nameof(PriorityFilter))]
    public PriorityType? PriorityFilter { get; set; }

    private bool FiltersOn => !string.IsNullOrWhiteSpace(TagNameFilter) || StateFilter != default || PriorityFilter != default;

    private AlarmsCollection<IncomingAlarmDto[]>? AlarmsCollection { get; set; }

    private FieldDto[]? _fields;

    private WorkStationDto[]? _workstations;

    private IDictionary<string, string>? FieldLinksDictionary { get; set; }

    private IDictionary<string, string>? WorkstationLinksDictionary { get; set; }

    private string _spinnerClass = string.Empty;

    private string _orderBy = string.Empty;

    private bool _orderByDesc = true;

    protected override void OnInitialized()
    {
        SetDates();
        base.OnInitialized();
    }

    protected override async Task OnParametersSetAsync()
    {
        await SetFieldWithWorkstation();

        await InitializePageAsync();
    }

    private async Task SetFieldWithWorkstation()
    {
        if (FieldService != null)
        {
            var fields = await FieldService.GetList();

            if (fields.Success)
            {
                _fields = fields.Payload.ToArray();
            }
        }

        if (WorkStationService != null)
        {
            var workstations = await WorkStationService.GetList(new { FieldId });

            if (workstations.Success)
            {
                _workstations = workstations.Payload.ToArray();
            }
        }

        FieldId ??= _fields?.FirstOrDefault()?.Id;

        FieldName = _fields?.FirstOrDefault(field => field.Id == FieldId)?.Name;

        WorkstationId ??= _workstations?.FirstOrDefault()?.Id;

        WorkstationName = _workstations?.FirstOrDefault(ws => ws.Id == WorkstationId)?.Name;

        FillLinks();
    }

    private void FillLinks()
    {
        if (_fields != null)
        {
            FieldLinksDictionary = _fields.ToDictionary(field =>
                field.Name,
                field => $"/Arm/?fieldId={field.Id}");
        }

        if (_workstations != null)
        {
            WorkstationLinksDictionary = _workstations.ToDictionary(workStation =>
                workStation.Name ?? Guid.NewGuid().ToString(),
                workStation => $"/Arm/?fieldId={FieldId}&workstationId={workStation.Id}");
        }
    }

    private async Task InitializePageAsync()
    {
        SpinnerService?.Show();

        await UpdateAlarms();

        SpinnerService?.Hide();
    }

    private void SetDates()
    {
        To = DateTimeOffset.Now;
        From = new DateTimeOffset(To.Year, To.Month, To.Day, 8, 0, 0, 0, To.Offset);
    }

    private async Task UpdateAlarms()
    {
        if (IncomingAlarmService != null)
        {
            var request = await IncomingAlarmService.GetAlarmsPerDate(new GetIncomingAlarmsByDatesQuery
                {
                    WorkStationId = WorkstationId ?? 0,
                    TagName = TagNameFilter,
                    ActivationFrom = From,
                    ActivationTo = To,
                    State = StateFilter,
                    Priority = PriorityFilter,
                    OrderPropertyName = _orderBy,
                    OrderByDescending = _orderByDesc,
                    Page = CurrentPage,
                    CountOnPage = 15
                });

            if (request.Success)
            {
                AlarmsCollection = request.Payload;
                PagesCount = AlarmsCollection.PagesCount;
            }
        }
    }

    private Task DropFilters()
    {
        TagNameFilter = string.Empty;
        StateFilter = null;
        PriorityFilter = null;
        return InitializePageAsync();
    }

    private async Task<Stream?> GetFileStream()
    {
        var result = await ExportService.ExportIncomingAlarms(new ExportIncomingAlarmsByDatesQuery
            {
                DocumentType = ExportDocumentType.Excel,
                WorkStationId = WorkstationId ?? 0,
                TagName = TagNameFilter,
                ActivationFrom = From,
                ActivationTo = To,
                State = StateFilter,
                Priority = PriorityFilter,
            });

        return new MemoryStream(result);
    }

    private async Task DownloadFileFromStream()
    {
        SpinnerService?.Show();

        var fileStream = await GetFileStream();

        if (fileStream == null) return;

        var fileName = "export.xlsx";

        using var streamRef = new DotNetStreamReference(stream: fileStream);

        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);

        SpinnerService?.Hide();
    }

    private async Task SetStateFilter(StateType? state)
    {
        StateFilter = state;
        await InitializePageAsync();
    }

    private async Task SetPriorityFilter(PriorityType? priority)
    {
        PriorityFilter = priority;
        await InitializePageAsync();
    }

    private async Task RefreshBySpinner()
    {
        _spinnerClass = " active";

        await InitializePageAsync();

        _spinnerClass = string.Empty;
    }

    private async Task OnOrderingChanged(string orderBy)
    {
        if (_orderBy == orderBy) _orderByDesc = !_orderByDesc;

        _orderBy = orderBy;

        CurrentPage = 1;

        await InitializePageAsync();
    }

    private async Task OnPageChanged(int page)
    {
        CurrentPage = page;
        await InitializePageAsync();
    }

}

@*<h3>Задачи</h3>
<div style="display:flex; justify-content:flex-end; gap: 10px; color: var(--color-typo-primary);">
    <span>Всего: <b>@countAll</b></span>
    <span>Критический: <b>@countUrgent</b></span>
    <span>Высокий: <b>@countHigh</b></span>
    <span>Низкий: <b>@countLow</b></span>
    <span>Информационный: <b>@countInfo</b></span>
    <span>Без приоритета: <b>@countNonePriority</b></span>
    <br />
    <span>HH: <b>@countHH</b></span>
    <span>H: <b>@countH</b></span>
    <span>LL: <b>@countLL</b></span>
    <span>L: <b>@countL</b></span>
    <span>Discr: <b>@countDiscr</b></span>
    <span>RSHI: <b>@countRSHI</b></span>
    <span>RSLO: <b>@countRSLO</b></span>
    <span>NoneState: <b>@countNoneState</b></span>
</div>
<div class="table-responsive" style="margin-top:10px;height:780px;overflow-y:auto;border-top: 0.5px solid rgba(0, 65, 102, 0.2);border-bottom: 0.5px solid rgba(0, 65, 102, 0.2);">
    <table class="table table-bordered">
        <thead class="thead-light">
            <tr>
                <th>Дата последней сигнализации</th>
                <th>Время последней сигнализации</th>
                <th colspan=3>Таг</th>
                <th colspan=4>Описание</th>
                <th>Приоритет 
                    <select @bind="@Priority" @onclick="OnParametersSetAsync">
                        <option value="">Все</option>
                        <option value="@PriorityType.Urgent">Критический</option>
                        <option value="@PriorityType.High">Высокий</option>
                        <option value="@PriorityType.Low">Низкий</option>
                        <option value="@PriorityType.Information">Инфо</option>
                        <option value="@PriorityType.None">Без приорит.</option>                        
                    </select>
                </th>
                <th>Уставка/Значение</th>                
                <th>В архив</th>
            </tr>            
        </thead>
        <tbody>

            @if(Alarms == null)
            {
                <Loader/>
            }
            else
            {
                foreach (var context in Alarms)
                {
                     <AlarmAtWork @key="context.Id" Tag="@context"/>  
                }                    
            }
        
        </tbody>
    </table>
</div>

@code {
    [Inject] IBufferAlarmService AlarmService { get; set; } = null!;
	[Inject] IIncomingAlarmService IncomingAlarmService { get; set; } = null!;
    [Inject] protected ISpinnerService SpinnerService { get; set; } = default!;

    [Parameter] public List<IncomingAlarmDto>? Alarms { get; set; }
    [Parameter] public PriorityType? Priority { get; set; }

    WorkStationEnum _workStation = WorkStationEnum.Upng;
    int countL, countLL, countH, countHH, countAll, countUrgent, countHigh, countLow, countInfo, countNonePriority, countDiscr,countRSHI,countRSLO,countComms, countNoneState;

    protected override async Task OnParametersSetAsync()
    {
        SpinnerService.Show();
        Alarms = null;
        countH = 0; countHH = 0; countL = 0; countLL = 0; countAll = 0; countUrgent = 0; countHigh = 0; countLow = 0; countInfo = 0; countNonePriority=0; countDiscr = 0; countRSHI = 0; countRSLO = 0; countComms = 0; countNoneState = 0;
        var result = await IncomingAlarmService.GetCollection(new GetIncomingAlarmsListQuery {WorkStationId = (int)_workStation});
        if (result.Success)
        {
            var incomingAlarms = result.Payload.Items;
            Alarms = incomingAlarms
	            .Where(c => c.StatusAlarm == StatusAlarmType.InWork)
	            .OrderByDescending(c => c.DateTimeActivation)
	            .ToList();


            foreach (var x in Alarms)
            {
                switch (x.State)
                {
                    case StateType.H:
                        countH += 1;
                        break;
                    case StateType.HH:
                        countHH += 1;
                        break;
                    case StateType.L:
                        countL += 1;
                        break;
                    case StateType.LL:
                        countLL += 1;
                        break;
                    case StateType.Discr:
                        countDiscr += 1;
                        break;
                    case StateType.RSHI:
                        countRSHI += 1;
                        break;
                    case StateType.RSLO:
                        countRSLO += 1;
                        break;
                    case StateType.Comms:
                        countComms += 1;
                        break;
                    case StateType.none:
                        countNoneState += 1;
                        break;
                }

                switch (x.Priority)
                {
                    case PriorityType.Low:
                        countLow += 1;
                        break;
                    case PriorityType.High:
                        countHigh += 1;
                        break;
                    case PriorityType.Urgent:
                        countUrgent += 1;
                        break;
                    case PriorityType.Information:
                        countInfo += 1;
                        break;
                    case PriorityType.None:
                        countNonePriority += 1;
                        break;
                }

                countAll += 1;
            }

            if (Priority != null)
            {
                var alarms = Alarms.Where(context => Priority == context.Priority || Priority == null).ToList();
                Alarms = alarms;
            }
        }
        SpinnerService.Hide();
    }

}
*@