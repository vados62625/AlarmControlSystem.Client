@using GPNA.AlarmControlSystem.Shared.NavMenu.Components
@using GPNA.AlarmControlSystem.Interfaces
@using GPNA.AlarmControlSystem.Options
@using Microsoft.Extensions.Options

<header class="header">
    <div class="logo">
        <span class="logo-img"></span>
        <span class="logo-title">
            Модуль СУС <br/>
            @(Options?.Value.BranchName ?? "N/A")
        </span>
    </div>

    <ul class="top-menu">
        <NavMenuItem Title="Главная" Href="" LinksDictionary="FieldLinksDictionary" NavLinkMatch="NavLinkMatch.All"/>
        <NavMenuItem Title="Мониторинг" LinksDictionary="FieldLinksDictionary" Href="monitoring"/>
        <NavMenuItem Title="Задачи" LinksDictionary="FieldLinksDictionary" Href="alarms-at-work"/>
        <NavMenuItem Title="Отчеты" LinksDictionary="ReportLinksDictionary" Href="reports"/>
        <NavMenuItem Title="Таблица переменных" LinksDictionary="FieldLinksDictionary" Href="tagtable"/>
        <NavMenuItem Title="Справочники" Href="directory" WithSubmenu="false"/>
        <NavMenuItem Title="Настройки" LinksDictionary="SettingsLinksDictionary" Href="settings"/>
    </ul>

    <div class="header-right-side">
        <LoginDisplay/>
    </div>
</header>

@code {
    [Inject]
    private IOptions<AcsModuleOptions>? Options { get; set; }
    
    [Inject]
    private IFieldService? FieldService { get; set; }
    
    private IDictionary<string, string>? FieldLinksDictionary { get; set; }
    private IDictionary<string, string>? ReportLinksDictionary { get; set; }
    private IDictionary<string, string>? SettingsLinksDictionary { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        ReportLinksDictionary = new Dictionary<string, string>()
        {
            { "Общий отчёт", "" },
            { "Отчёт о количестве", "/back-alarms" },
            { "Статистика выполения", "/execute-tasks" },
        };
        
        SettingsLinksDictionary = new Dictionary<string, string>()
        {
            { "KPI", "/kpi" },
            { "Ответственные", "/permissions" }
        };
        
        await GetFields();

        await base.OnInitializedAsync();
    }
    
    private async Task GetFields()
    {
        if (FieldService != null)
        {
            var result = await FieldService.GetList();

            if (result.Success)
            {
                var fields = result.Payload.ToArray();
                
                FieldLinksDictionary = fields.ToDictionary(field => field.Name, field => $"/?fieldId={field.Id}");
            }
        }
    }
}
