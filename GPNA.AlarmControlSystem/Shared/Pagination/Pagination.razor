@using GPNA.AlarmControlSystem.Shared.Pagination.Components

<nav aria-label="Page navigation example">
    <ul class="pagination pt-3 justify-content-center">
        <PaginationComponent Text="&laquo;" PageIndex="@(CurrentPage-1)" Active="false" Disabled="@(CurrentPage == 1)" OnPageClick="@(async () => await OnPageChanged(CurrentPage - 1))"></PaginationComponent>
        @if (PagesToShow != default)
        {
            @foreach (var pageIndex in PagesToShow)
            {
                @if (pageIndex != 0)
                {
                    <PaginationComponent Text="@pageIndex.ToString()" PageIndex="@(pageIndex)" Active="@(pageIndex == CurrentPage)" Disabled="@false" OnPageClick="@(async () => await OnPageChanged(pageIndex))"></PaginationComponent>
                }
                else
                {
                    <PaginationComponent Text="..." PageIndex="@(pageIndex)" Active="@false" Disabled="@true"></PaginationComponent>
                }
            }
        }
        <PaginationComponent Text="&raquo;" PageIndex="@(CurrentPage+1)" Active="false" Disabled="@(CurrentPage == PagesCount)" OnPageClick="@(async () => await OnPageChanged(CurrentPage + 1))"></PaginationComponent>
    </ul>
</nav>

@code {

    [Parameter]
    public int PagesCount { get; set; }

    [Parameter]
    public int CurrentPage { get; set; }

    [Parameter]
    public EventCallback<int> OnPageClick { get; set; }

    private int[]? PagesToShow { get; set; }

    protected override void OnParametersSet()
    {
        PagesToShow = GetPagesToShow();
    }

    private int[] GetPagesToShow()
    {
        if (PagesCount <= 10)
        {
            return PagesCount == default ? new[] { 1 } : Enumerable.Range(1, PagesCount).ToArray();
        }


        if (CurrentPage == 1 || CurrentPage == 2)
        {
            return new[] { 1, 2, 0, PagesCount };
        }
   
        if (CurrentPage == PagesCount || CurrentPage == PagesCount - 1)
        {
            return new[] { 1, 0, PagesCount - 1, PagesCount };
        }

        return new[] { 1, 0, CurrentPage, 0, PagesCount };
    }

    private async Task OnPageChanged(int pageIndex)
    {
        await OnPageClick.InvokeAsync(pageIndex);

        PagesToShow = GetPagesToShow();
    }

}